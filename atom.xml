<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simon Xie</title>
  <icon>https://www.gravatar.com/avatar/32db771918c67cb8f4969f34b77012cf</icon>
  <subtitle>All magic comes with a price.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.codewalker.me/"/>
  <updated>2019-05-31T03:28:36.000Z</updated>
  <id>https://blog.codewalker.me/</id>
  
  <author>
    <name>Simon Xie</name>
    <email>simon.xie@codewalker.me</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>how to use &#39;left join&#39; with multi-condition</title>
    <link href="https://blog.codewalker.me/2019/05/31/how-to-use-left-join-with-multi-condition/"/>
    <id>https://blog.codewalker.me/2019/05/31/how-to-use-left-join-with-multi-condition/</id>
    <published>2019-05-31T03:20:03.000Z</published>
    <updated>2019-05-31T03:28:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Talk-is-cheap"><a href="#Talk-is-cheap" class="headerlink" title="Talk is cheap"></a>Talk is cheap</h1><p>To see code below<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT id,amount FROM product</span><br><span class="line">LEFT JOIN product_details</span><br><span class="line">    ON  (product.id = product_details.id)</span><br><span class="line">        AND product_details.id=2;</span><br></pre></td></tr></table></figure></p><p>EOF</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Talk-is-cheap&quot;&gt;&lt;a href=&quot;#Talk-is-cheap&quot; class=&quot;headerlink&quot; title=&quot;Talk is cheap&quot;&gt;&lt;/a&gt;Talk is cheap&lt;/h1&gt;&lt;p&gt;To see code below&lt;br&gt;&lt;figu
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://blog.codewalker.me/tags/mysql/"/>
    
      <category term="database" scheme="https://blog.codewalker.me/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>How to turn on &#39;install App from anywhere&#39; on macOS Sierra 10.12 and above</title>
    <link href="https://blog.codewalker.me/2018/10/10/How-to-turn-on-install-App-from-anywhere/"/>
    <id>https://blog.codewalker.me/2018/10/10/How-to-turn-on-install-App-from-anywhere/</id>
    <published>2018-10-10T01:49:44.000Z</published>
    <updated>2018-10-10T02:04:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="How-to-turn-on-‘install-App-from-anywhere’-on-macOS-Sierra-10-12-and-above"><a href="#How-to-turn-on-‘install-App-from-anywhere’-on-macOS-Sierra-10-12-and-above" class="headerlink" title="How to turn on ‘install App from anywhere’ on macOS Sierra 10.12 and above"></a>How to turn on ‘install App from anywhere’ on macOS Sierra 10.12 and above</h1><p>In System Preferences &gt;&gt; Security &amp; Privacy &gt;&gt; Allow apps downloaded from you cannot see <code>Anywhere</code> when you want to install an App not from AppStore or any developer who is NOT identified.</p><ol><li><p><code>Open your Terminal</code></p></li><li><p>Type in <code>sudo spctl --master-disable</code></p></li><li><p>Press <code>enter</code> then type in your system password</p></li><li><p>Re-launch – (close then open) your System Preferences setting panel then you can see the option <code>Anywhere</code></p></li><li><p>Done</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;How-to-turn-on-‘install-App-from-anywhere’-on-macOS-Sierra-10-12-and-above&quot;&gt;&lt;a href=&quot;#How-to-turn-on-‘install-App-from-anywhere’-on-
      
    
    </summary>
    
    
      <category term="MacOSX" scheme="https://blog.codewalker.me/tags/MacOSX/"/>
    
  </entry>
  
  <entry>
    <title>nice switcher using pure css3</title>
    <link href="https://blog.codewalker.me/2018/08/26/nice-switcher-using-pure-css3/"/>
    <id>https://blog.codewalker.me/2018/08/26/nice-switcher-using-pure-css3/</id>
    <published>2018-08-25T16:41:55.000Z</published>
    <updated>2018-08-25T16:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Talk-is-cheap"><a href="#Talk-is-cheap" class="headerlink" title="Talk is cheap"></a>Talk is cheap</h1><p><code>css file</code> named switcher</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ececec</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">justify-items</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.switch</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">55px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">30px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.slider</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">transition</span>: .<span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.1); &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.slider</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#afafaf</span>;</span><br><span class="line">  <span class="attribute">transition</span>: .<span class="number">5s</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.switch</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> + <span class="selector-class">.slider</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> + <span class="selector-class">.slider</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(47px) <span class="built_in">rotateZ</span>(45deg);</span><br><span class="line">  <span class="attribute">background-color</span>: yellow; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.slider</span><span class="selector-class">.round</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">35px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.slider</span><span class="selector-class">.round</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">43%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">43%</span>;</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-45deg); &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>switcher<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'viewport'</span> <span class="attr">content</span>=<span class="string">'width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no'</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/switcher.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"switcher"</span> <span class="attr">class</span>=<span class="string">"switch"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">'switcher'</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"slider round"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"other_switcher"</span> <span class="attr">class</span>=<span class="string">"switch"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">'other_switcher'</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"slider round"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Talk-is-cheap&quot;&gt;&lt;a href=&quot;#Talk-is-cheap&quot; class=&quot;headerlink&quot; title=&quot;Talk is cheap&quot;&gt;&lt;/a&gt;Talk is cheap&lt;/h1&gt;&lt;p&gt;&lt;code&gt;css file&lt;/code&gt; name
      
    
    </summary>
    
    
      <category term="html5" scheme="https://blog.codewalker.me/tags/html5/"/>
    
      <category term="css3" scheme="https://blog.codewalker.me/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>Hotel website design</title>
    <link href="https://blog.codewalker.me/2018/08/19/Hotel-website-design/"/>
    <id>https://blog.codewalker.me/2018/08/19/Hotel-website-design/</id>
    <published>2018-08-18T16:06:05.000Z</published>
    <updated>2018-08-18T16:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Meet-my-new-hotel-website-design"><a href="#Meet-my-new-hotel-website-design" class="headerlink" title="Meet my new hotel website design"></a>Meet my new hotel website design</h1><p>press <a href="http://motel.codewalker.me" title="hotel websitedesing" target="_blank" rel="noopener">HERE</a> to view it.</p><p>I love this world.<br>Good night. &lt;3</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Meet-my-new-hotel-website-design&quot;&gt;&lt;a href=&quot;#Meet-my-new-hotel-website-design&quot; class=&quot;headerlink&quot; title=&quot;Meet my new hotel website de
      
    
    </summary>
    
    
      <category term="webdesign" scheme="https://blog.codewalker.me/tags/webdesign/"/>
    
      <category term="bootstrap" scheme="https://blog.codewalker.me/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>bricks alogorithm</title>
    <link href="https://blog.codewalker.me/2018/08/14/bricks-alogorithm/"/>
    <id>https://blog.codewalker.me/2018/08/14/bricks-alogorithm/</id>
    <published>2018-08-14T05:17:49.000Z</published>
    <updated>2018-08-14T05:19:02.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-08-14 13:07:01</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.meg)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_bricks</span><span class="params">(small, big, goal)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">5</span>*big &lt;= goal:</span><br><span class="line">        s = goal<span class="number">-5</span>*big</span><br><span class="line">        <span class="keyword">if</span> s&lt;=small:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s = goal%<span class="number">5</span></span><br><span class="line">        <span class="keyword">return</span> s&lt;=small</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        small = randint(<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line">        big = randint(<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line">        goal = randint(<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'small:&#123;0&#125;, big:&#123;1&#125;,goal: &#123;2&#125;=&gt; &#123;3&#125; '</span>.format(small,big,goal,make_bricks(small,big,goal))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.codewalker.me/tags/python/"/>
    
      <category term="alogorithm" scheme="https://blog.codewalker.me/tags/alogorithm/"/>
    
  </entry>
  
  <entry>
    <title>How to implement Stack in python</title>
    <link href="https://blog.codewalker.me/2018/08/09/How-to-implement-Stack-in-python/"/>
    <id>https://blog.codewalker.me/2018/08/09/How-to-implement-Stack-in-python/</id>
    <published>2018-08-09T02:49:48.000Z</published>
    <updated>2018-08-09T02:53:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Talk is cheap</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-08-09 10:42:22</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.meg)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, head=None)</span>:</span></span><br><span class="line">        self.head = head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, new_element)</span>:</span></span><br><span class="line">        current = self.head</span><br><span class="line">        <span class="keyword">if</span> self.head:</span><br><span class="line">            <span class="keyword">while</span> current.next:</span><br><span class="line">                current = current.next</span><br><span class="line">            current.next = new_element</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.head = new_element</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_first</span><span class="params">(self, new_element)</span>:</span></span><br><span class="line">        <span class="string">"Insert new element as the head of the LinkedList"</span></span><br><span class="line">        current = self.head</span><br><span class="line">        self.head = new_element</span><br><span class="line">        new_element.next = current</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_first</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"Delete the first (head) element in the LinkedList as return it"</span></span><br><span class="line">        current = self.head.next</span><br><span class="line">        self.head = current</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, top=None)</span>:</span></span><br><span class="line">        self.ll = LinkedList(top)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, new_element)</span>:</span></span><br><span class="line">        <span class="string">"Push (add) a new element onto the top of the stack"</span></span><br><span class="line">        self.ll.insert_first(new_element)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"Pop (remove) the first element off the top of the stack and return it"</span></span><br><span class="line">        <span class="keyword">if</span> self.ll.head == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        current = self.ll.head</span><br><span class="line">        self.ll.delete_first()</span><br><span class="line">        <span class="keyword">return</span> current</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Test cases</span></span><br><span class="line">    <span class="comment"># Set up some Elements</span></span><br><span class="line">    e1 = Element(<span class="number">1</span>)</span><br><span class="line">    e2 = Element(<span class="number">2</span>)</span><br><span class="line">    e3 = Element(<span class="number">3</span>)</span><br><span class="line">    e4 = Element(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Start setting up a Stack</span></span><br><span class="line">    stack = Stack(e1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Test stack functionality</span></span><br><span class="line">    stack.push(e2)</span><br><span class="line">    stack.push(e3)</span><br><span class="line">    print(stack.pop().value)</span><br><span class="line">    print(stack.pop().value)</span><br><span class="line">    print(stack.pop().value)</span><br><span class="line">    print(stack.pop())</span><br><span class="line">    stack.push(e4)</span><br><span class="line">    print(stack.pop().value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Talk is cheap&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/sp
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.codewalker.me/tags/python/"/>
    
      <category term="stack" scheme="https://blog.codewalker.me/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>the template for hire</title>
    <link href="https://blog.codewalker.me/2018/08/01/the-template-for-hire/"/>
    <id>https://blog.codewalker.me/2018/08/01/the-template-for-hire/</id>
    <published>2018-08-01T02:58:40.000Z</published>
    <updated>2018-08-01T03:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Developpeur-web"><a href="#Developpeur-web" class="headerlink" title="Développeur web"></a>Développeur web</h1><h2 id="L’entreprise-Fake-name-Koss-Group"><a href="#L’entreprise-Fake-name-Koss-Group" class="headerlink" title="L’entreprise : Fake name - Koss Group"></a>L’entreprise : Fake name - Koss Group</h2><p>Fake discription balabala parse.<br>Excepturi amet amet ipsum et. Sed assumenda aliquid tempore laborum sunt voluptatem error. Amet nisi voluptas sequi sapiente id excepturi.</p><p>Eum quia vel rerum accusantium expedita rerum. Libero dolorem est quis ratione. Cumque voluptatibus vero.</p><p>Ipsam fuga fuga est. Hic necessitatibus suscipit. Reprehenderit quisquam adipisci et. Necessitatibus ea unde et nihil debitis.</p><p>Au sein d’une équipe de consultants dynamiques ayant à cœur de vous intégrer et de vous accompagner, vous aurez l’opportunité d’intervenir sur des projets digitaux innovants, riches et variés.</p><h2 id="Description-du-poste"><a href="#Description-du-poste" class="headerlink" title="Description du poste"></a>Description du poste</h2><p>Vous mangez, buvez, dormez et rêvez digital</p><p>Techniquement, vous maîtrisez les environnements PHP or Python-Flask (expérience à l’appui) Vous êtes capable de monter en compétence et êtes autonome sur des techniques que vous ne connaissez pas mais proches de celles déjà acquises. En charge de tous les projets de développement en technologies web et mobile de l’hôtel, nous recherchons un(e) Concepteur(trice) Développeur(se) web.</p><p>En étroite collaboration avec la Direction et les chargés d’affaires, vous contribuerez à la conceptualisation et au développement d’une plateforme web sur le framework.</p><p>Vous maîtrisez et êtes rigoureux avec les différents outils de suivi de projet, git ou subversion. Si vous avez un ID de github. c’est mieux.</p><p>Vous faites preuve de professionnalisme ainsi que d’un esprit d’équipe communiquant et synthétique</p><p>En <code>Montreal Quebec</code> vous rejoignez une équipe humaine et dynamique dans laquelle votre savoir-être et votre bonne humeur fera la différence pour inventer le futur de nos clients.</p><p>Ne cherchez plus et rejoignez-nous !</p><p>Qui ne rêve pas d’être épanoui et heureux au travail ? Si c’est votre souhait, ça tombe bien : depuis 2018, <code>Enterprise name</code> est labellisé Happy Trainees et Happy at Work for Starters.<br>Avec cela vous êtes forcément conquis pour venir travailler avec nous!</p><p>Pour vivre de nouvelles et belles aventures, merci d’envoyer votre CV à : <a href="mailto:`address@someemail.com" target="_blank" rel="noopener">`address@someemail.com</a>`</p><h2 id="Criteres-de-l’offre"><a href="#Criteres-de-l’offre" class="headerlink" title="Critères de l’offre"></a>Critères de l’offre</h2><h3 id="Competences-techniques"><a href="#Competences-techniques" class="headerlink" title="Compétences techniques"></a>Compétences techniques</h3><ul><li>Formation informatique</li><li>Statistique</li><li>Programmation web</li><li>Back-end PHP</li><li>AJAX/JavaScript</li><li>JQuery</li><li>HMTL</li><li>CSS</li><li>Bootstrap</li><li>Interface</li><li>Git</li><li>Web</li><li>Framework</li><li>MySql</li><li>Redis</li><li>Nginx, Apache2</li><li>CentOS</li></ul><h3 id="Description-du-profil"><a href="#Description-du-profil" class="headerlink" title="Description du profil"></a>Description du profil</h3><ul><li>Des bases solides de développement orienté objet en technologies PHP/Python</li><li>la rédaction des users stories de la solution</li><li>la modélisation et la conception technique</li><li>la mise en conformité de la solution avec les exigences de SEO</li><li>la mise en conformité de la solution avec les exigences de sécurité</li><li>le développement des sites</li></ul><h3 id="Experience-requise-5-ans"><a href="#Experience-requise-5-ans" class="headerlink" title="Expérience requise: 5+ ans"></a>Expérience requise: 5+ ans</h3><h3 id="Lieu-Montreal-Quebec"><a href="#Lieu-Montreal-Quebec" class="headerlink" title="Lieu: Montreal Quebec"></a>Lieu: Montreal Quebec</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Developpeur-web&quot;&gt;&lt;a href=&quot;#Developpeur-web&quot; class=&quot;headerlink&quot; title=&quot;Développeur web&quot;&gt;&lt;/a&gt;Développeur web&lt;/h1&gt;&lt;h2 id=&quot;L’entreprise-
      
    
    </summary>
    
    
      <category term="hire_template" scheme="https://blog.codewalker.me/tags/hire-template/"/>
    
  </entry>
  
  <entry>
    <title>Knowing Argparse in Python</title>
    <link href="https://blog.codewalker.me/2018/07/28/Knowing-Argparse-in-Python/"/>
    <id>https://blog.codewalker.me/2018/07/28/Knowing-Argparse-in-Python/</id>
    <published>2018-07-28T03:00:31.000Z</published>
    <updated>2018-07-31T07:26:21.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-07-28 11:01:21</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.meg)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">"Calculate fibonacci"</span>)</span><br><span class="line">    group = parser.add_mutually_exclusive_group()</span><br><span class="line">    group.add_argument(<span class="string">'-v'</span>, <span class="string">'--verbose'</span>, action=<span class="string">'store_true'</span>)</span><br><span class="line">    group.add_argument(<span class="string">'-q'</span>, <span class="string">'--quit'</span>, action=<span class="string">'store_true'</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">'num'</span>, help=<span class="string">'The fibonacci number you wish to calculate.'</span>, type=int)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">'-o'</span>, <span class="string">'--output'</span>, help=<span class="string">'Output result into a file'</span>, action=<span class="string">'store_true'</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    num = args.num</span><br><span class="line">    result = fib(num)</span><br><span class="line">    output_result = <span class="string">f'The <span class="subst">&#123;num&#125;</span>th fibonacci is <span class="subst">&#123;result&#125;</span>'</span></span><br><span class="line">    <span class="keyword">if</span> args.verbose:</span><br><span class="line">        print(output_result)</span><br><span class="line">    <span class="keyword">elif</span> args.quit:</span><br><span class="line">        print(result)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f'Fib(<span class="subst">&#123;num&#125;</span>)=<span class="subst">&#123;result&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">if</span> args.output:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'fibonacci.txt'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f_h:</span><br><span class="line">            f_h.write(<span class="string">'\n'</span> + output_result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.codewalker.me/tags/python/"/>
    
      <category term="argparse" scheme="https://blog.codewalker.me/tags/argparse/"/>
    
  </entry>
  
  <entry>
    <title>String tip capitalize</title>
    <link href="https://blog.codewalker.me/2018/07/28/String-tip-capitalize/"/>
    <id>https://blog.codewalker.me/2018/07/28/String-tip-capitalize/</id>
    <published>2018-07-28T01:47:08.000Z</published>
    <updated>2018-07-28T02:35:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intor"><a href="#Intor" class="headerlink" title="Intor"></a>Intor</h1><p>In our work life, sometimes we wanna capitalize a word using <code>str.capitalize</code>, but for serveral sentense how to do it?</p><h2 id="Talk-is-cheap"><a href="#Talk-is-cheap" class="headerlink" title="Talk is cheap"></a>Talk is cheap</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-07-28 09:50:38</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.meg)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">capitalize_sentense</span><span class="params">(s,sep=None)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (sep <span class="keyword">or</span> <span class="string">' '</span>).join(x.capitalize() <span class="keyword">for</span> x <span class="keyword">in</span> s.split(sep))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">capitalize_the_first</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s.capitalize()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    s = <span class="string">'Et mollJJDKitia et iJJDJkdn. digKKDJnissimos kdjkdjHHSJ.'</span></span><br><span class="line">    out = capitalize_sentense(s,sep=<span class="string">'. '</span>)</span><br><span class="line">    print(out)</span><br><span class="line">    out = capitalize_the_first(s)</span><br><span class="line">    print(out)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>Here’s a little trigger. we split them first, then capitalize them.</p><h2 id="Lazy-makes-the-world-better"><a href="#Lazy-makes-the-world-better" class="headerlink" title="Lazy makes the world better"></a>Lazy makes the world better</h2><p>EOF.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Intor&quot;&gt;&lt;a href=&quot;#Intor&quot; class=&quot;headerlink&quot; title=&quot;Intor&quot;&gt;&lt;/a&gt;Intor&lt;/h1&gt;&lt;p&gt;In our work life, sometimes we wanna capitalize a word usi
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.codewalker.me/tags/python/"/>
    
      <category term="tips" scheme="https://blog.codewalker.me/tags/tips/"/>
    
      <category term="string" scheme="https://blog.codewalker.me/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>Knowing Templates in Python</title>
    <link href="https://blog.codewalker.me/2018/07/27/Knowing-Templates-in-Python/"/>
    <id>https://blog.codewalker.me/2018/07/27/Knowing-Templates-in-Python/</id>
    <published>2018-07-27T14:45:12.000Z</published>
    <updated>2018-07-28T02:31:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intor"><a href="#Intor" class="headerlink" title="Intor"></a>Intor</h1><p>Here, we are not talk about <strong>THE template</strong> as we have used to talk about <strong>the tempale engine</strong> such as <code>jinjia2</code>.<br>but, we are talking about <strong>string templete</strong><br>Commonly we write like this <code>print(&#39;balalabala %d&#39; % v)</code> it makes <code>v</code> instead of <code>%d</code><br>or in new style or THE F word whateve you want call it. <code>print(f&#39;balabala {v}&#39;)</code></p><p>Templates provide simpler string substitutions as described in PEP 292. Instead of the normal “%”-based substitutions. As we know, a string when we want to contert them to some format way.</p><h2 id="Talk-is-cheap"><a href="#Talk-is-cheap" class="headerlink" title="Talk is cheap"></a>Talk is cheap</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-07-27 22:46:42</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.meg)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span>  string <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTemplate</span><span class="params">(Template)</span>:</span></span><br><span class="line">    delimiter = <span class="string">'#'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    cart = []</span><br><span class="line">    cart.append(dict(</span><br><span class="line">        item=<span class="string">'Coke'</span>,</span><br><span class="line">        price=<span class="number">8</span>,</span><br><span class="line">        qty=<span class="number">3</span></span><br><span class="line">    ))</span><br><span class="line">    cart.append(dict(</span><br><span class="line">        item=<span class="string">'Cake'</span>,</span><br><span class="line">        price=<span class="number">4</span>,</span><br><span class="line">        qty=<span class="number">4</span></span><br><span class="line">    ))</span><br><span class="line">    cart.append(dict(</span><br><span class="line">        item=<span class="string">"Apple"</span>,</span><br><span class="line">        price=<span class="number">1</span>,</span><br><span class="line">        qty=<span class="number">5</span></span><br><span class="line">    ))</span><br><span class="line">    t = Template(<span class="string">"$qty x $item per $price"</span>)</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> cart:</span><br><span class="line">        print(t.substitute(item))</span><br><span class="line">        total += item[<span class="string">'price'</span>] * item[<span class="string">'qty'</span>]</span><br><span class="line">    print(<span class="string">f'Total: <span class="subst">&#123;total&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="Read-it-amp-comprehen-it-amp-love-it"><a href="#Read-it-amp-comprehen-it-amp-love-it" class="headerlink" title="Read it &amp; comprehen it &amp; love it"></a>Read it &amp; comprehen it &amp; love it</h2><p>EOF.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Intor&quot;&gt;&lt;a href=&quot;#Intor&quot; class=&quot;headerlink&quot; title=&quot;Intor&quot;&gt;&lt;/a&gt;Intor&lt;/h1&gt;&lt;p&gt;Here, we are not talk about &lt;strong&gt;THE template&lt;/strong&gt; 
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.codewalker.me/tags/python/"/>
    
      <category term="template" scheme="https://blog.codewalker.me/tags/template/"/>
    
  </entry>
  
  <entry>
    <title>Download pdf with asyncio and aiphttp</title>
    <link href="https://blog.codewalker.me/2018/07/25/download-pdf-with-asyncio-and-aiphttp/"/>
    <id>https://blog.codewalker.me/2018/07/25/download-pdf-with-asyncio-and-aiphttp/</id>
    <published>2018-07-24T16:24:28.000Z</published>
    <updated>2018-07-25T09:19:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Talk is cheap</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-07-25 00:24:28</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.me)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> Request, urlopen</span><br><span class="line"><span class="keyword">import</span> aiofiles</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> async_timeout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">download_coroutine</span><span class="params">(url, headers, session)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> async_timeout.timeout(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">            path = <span class="string">'/path/to/some/where/you/like/'</span></span><br><span class="line">            filename = path + os.path.basename(url) + <span class="string">'.pdf'</span></span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f_handle:</span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                    chunk = <span class="keyword">await</span> response.content.read(<span class="number">1024</span>)</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">await</span> f_handle.write(chunk)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> response.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">url_list</span><span class="params">(url, headers)</span>:</span></span><br><span class="line">    req = Request(url, headers=headers)</span><br><span class="line">    data = urlopen(req).read()</span><br><span class="line">    d = json.loads(str(data, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    urls = d[<span class="string">'data'</span>]</span><br><span class="line">    <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(loop,url_api, headers)</span>:</span></span><br><span class="line">    urls = <span class="keyword">await</span> url_list(url_api,headers)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession(loop=loop) <span class="keyword">as</span> session:</span><br><span class="line">        tasks = [download_coroutine(url, headers, session) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line">        <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(url_api)</span>:</span></span><br><span class="line">    start_time = time.clock()</span><br><span class="line">    headers = &#123;<span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</span><br><span class="line">               <span class="string">'Accept-Encoding'</span>: <span class="string">'gb2312,utf-8'</span>,</span><br><span class="line">               <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0(Windows;U;WindowsNT6.1;en-us)AppleWebKit/534.50(KHTML,likeGecko)Version/5.1Safari/534.50'</span>,</span><br><span class="line">               <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2'</span>,</span><br><span class="line">               <span class="string">'Connection'</span>: <span class="string">'Keep-alive'</span></span><br><span class="line">               &#125;</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(run(loop,url_api,headers))</span><br><span class="line">    loop.close()</span><br><span class="line">    t = time.clock()-start_time</span><br><span class="line">    print(<span class="string">'total time cost:%f.2'</span> % t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    url_api = <span class="string">'http://www.someapi.com'</span></span><br><span class="line">    main(url_api)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Talk is cheap&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/sp
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.codewalker.me/tags/python/"/>
    
      <category term="asyncio" scheme="https://blog.codewalker.me/tags/asyncio/"/>
    
      <category term="aiphttp" scheme="https://blog.codewalker.me/tags/aiphttp/"/>
    
  </entry>
  
  <entry>
    <title>let your site fly</title>
    <link href="https://blog.codewalker.me/2018/07/23/let-t-your-site-fly/"/>
    <id>https://blog.codewalker.me/2018/07/23/let-t-your-site-fly/</id>
    <published>2018-07-23T07:40:48.000Z</published>
    <updated>2018-07-24T16:25:03.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Intor</li></ol><blockquote><p>“Builds can be the most awful sinkhole for teams to waste their time with - gulp is a serious win for any project.”<br>Eric, Co-founder @ stae</p></blockquote><ol><li><p>Get ready</p><ul><li><p>Install <code>gulp</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp</span><br></pre></td></tr></table></figure></li><li><p>Install plugins</p><ul><li>gulp-minify-css</li><li>gulp-uglify</li><li>gulp-htmlmin</li><li>gulp-htmlclean<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-minify-css</span><br></pre></td></tr></table></figure></li></ul><p>ETC…</p></li></ul></li><li><p>Configuration<br> Write your own <code>gulpfile.js</code> &amp; put it in your root dir</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> debug = <span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录 css文件</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/css/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录 html文件</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">        minifyJS: <span class="literal">true</span>,</span><br><span class="line">        minifyCSS: <span class="literal">true</span>,</span><br><span class="line">        minifyURLs: <span class="literal">true</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/js 目录 js文件</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/js/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'hexo'</span>, [</span><br><span class="line">    <span class="string">'minify-html'</span>,<span class="string">'minify-css'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></li><li><p>Deploy</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">gulp hexo</span><br><span class="line">hexo deply</span><br></pre></td></tr></table></figure><p>Done.<br>EOF.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;Intor&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;“Builds can be the most awful sinkhole for teams to waste their time with - gulp is a serious win 
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://blog.codewalker.me/tags/hexo/"/>
    
      <category term="frontend" scheme="https://blog.codewalker.me/tags/frontend/"/>
    
  </entry>
  
  <entry>
    <title>Baidu optimization</title>
    <link href="https://blog.codewalker.me/2018/07/23/Baidu-seo/"/>
    <id>https://blog.codewalker.me/2018/07/23/Baidu-seo/</id>
    <published>2018-07-23T05:40:39.000Z</published>
    <updated>2018-07-23T07:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Into"><a href="#Into" class="headerlink" title="Into"></a>Into</h1><p>Nothing to say…</p><h2 id="Install-two-plugins"><a href="#Install-two-plugins" class="headerlink" title="Install two plugins"></a>Install two plugins</h2><ul><li>hexo-generator-baidu-sitemap</li><li>hexo-baidu-url-submit</li></ul><h3 id="hexo-generator-baidu-sitemap"><a href="#hexo-generator-baidu-sitemap" class="headerlink" title="hexo-generator-baidu-sitemap"></a>hexo-generator-baidu-sitemap</h3><ul><li>Installation</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><ul><li>Setup</li></ul><p>In you <code>_config.yml</code> add:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure><ul><li>Use</li></ul><p>It’s will create a file named <code>baidusitemap.xml</code> automaticlly when you deploy your to GitHub</p><h3 id="hexo-baidu-url-submit"><a href="#hexo-baidu-url-submit" class="headerlink" title="hexo-baidu-url-submit"></a>hexo-baidu-url-submit</h3><ul><li>Installation</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><ul><li>Setup</li></ul><p>In you <code>_config.yml</code> add:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 3 <span class="comment">### last 3 urls will be submitted</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># your site domain</span></span><br><span class="line">  <span class="comment"># just like: url: http://www.yourdomain.com before you see</span></span><br><span class="line">  <span class="comment"># notice without 'http://' or 'https://'</span></span><br><span class="line">  host: www.yourdomain.com</span><br><span class="line"></span><br><span class="line">  <span class="comment"># your token here.</span></span><br><span class="line">  <span class="comment"># find out in 'https://ziyuan.baidu.com/linksubmit/index?site=http://www.yourdomain.com/'</span></span><br><span class="line">  token: your-token-here</span><br><span class="line">  path: baidu_urls.txt</span><br></pre></td></tr></table></figure><p>and add <code>- type: baidu_url_submitter</code> to your config.yml:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - <span class="built_in">type</span>: git</span><br><span class="line">    repo: who@github.com:who/repo.address.git</span><br><span class="line">    branch: master</span><br><span class="line">  - <span class="built_in">type</span>: baidu_url_submitter</span><br></pre></td></tr></table></figure><ul><li><p>principle</p><ol><li>Create baidu_urls.txt and filled last 3 ursl in it when <code>hexo denerate</code>.</li><li>Submiting your 3 new urls to baidu when <code>hexo deploy</code>, also it will submit to Git whilc is your another source in <code>_config.yml</code></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Into&quot;&gt;&lt;a href=&quot;#Into&quot; class=&quot;headerlink&quot; title=&quot;Into&quot;&gt;&lt;/a&gt;Into&lt;/h1&gt;&lt;p&gt;Nothing to say…&lt;/p&gt;
&lt;h2 id=&quot;Install-two-plugins&quot;&gt;&lt;a href=&quot;#Ins
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://blog.codewalker.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>__name__ comprehension</title>
    <link href="https://blog.codewalker.me/2018/07/21/name-comprehension/"/>
    <id>https://blog.codewalker.me/2018/07/21/name-comprehension/</id>
    <published>2018-07-21T04:49:37.000Z</published>
    <updated>2018-07-21T06:01:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intor"><a href="#Intor" class="headerlink" title="Intor"></a>Intor</h1><p><code>__name__</code> is one such special variable. If the source file is executed as the main program, the interpreter sets the <code>__name__</code> variable to have a value <code>__main__</code>. If this file is being imported from another module, <code>__name__</code> will be set to the module’s name.<br><code>__name__</code> is a built-in variable which evaluates to the name of the current module. Thus it can be used to check whether the current script is being run on its own or being imported somewhere else by combining it with if statement</p><h1 id="Using"><a href="#Using" class="headerlink" title="Using"></a>Using</h1><h2 id="As-main-srcipt"><a href="#As-main-srcipt" class="headerlink" title="As main srcipt"></a>As main srcipt</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-07-21 12:59:29</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.meg)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"><span class="comment"># @filename: first_module.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">f'Run first as <span class="subst">&#123;__name__&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">f'Run first as Import <span class="subst">&#123;__name__&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><h2 id="As-a-module"><a href="#As-a-module" class="headerlink" title="As a module"></a>As a module</h2><p>Import <code>first_module.py</code> module as a module</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-07-21 13:00:31</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.meg)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"><span class="comment"># @Filename: second_module.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> first_module</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">second_main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f'Run second as <span class="subst">&#123;__name__&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    second_main()</span><br></pre></td></tr></table></figure><h2 id="See-what’s-the-different-of-name"><a href="#See-what’s-the-different-of-name" class="headerlink" title="See what’s the different of __name__"></a>See what’s the different of <code>__name__</code></h2><h3 id="Round-one"><a href="#Round-one" class="headerlink" title="Round one"></a>Round one</h3><p>We run <code>first_module.py</code> directly, it will show us <code>Run first as __main__</code>, because we check the value of <code>__name__</code>. Obvisously it’s.</p><h3 id="Round-two"><a href="#Round-two" class="headerlink" title="Round two"></a>Round two</h3><p>Running <code>second_module.py</code>. it shows us <code>Run first as Import first_module</code>. Here, we’ve known the value of <code>__name__</code> will be changed. At first script it’s value is ‘<strong>main</strong>‘ as main level, but it has changed to <strong>module name</strong> when we import it as a module.</p><p>EOF.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Intor&quot;&gt;&lt;a href=&quot;#Intor&quot; class=&quot;headerlink&quot; title=&quot;Intor&quot;&gt;&lt;/a&gt;Intor&lt;/h1&gt;&lt;p&gt;&lt;code&gt;__name__&lt;/code&gt; is one such special variable. If the
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.codewalker.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Knowing descriptor in Python 2</title>
    <link href="https://blog.codewalker.me/2018/07/18/Knowing-descriptor-in-Python-2/"/>
    <id>https://blog.codewalker.me/2018/07/18/Knowing-descriptor-in-Python-2/</id>
    <published>2018-07-18T13:53:15.000Z</published>
    <updated>2018-07-19T09:27:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Do"><a href="#Do" class="headerlink" title="Do"></a>Do</h1><p>read it below</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-07-18 10:21:16</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.meg)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Desc</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        print(<span class="string">f'in init, data is: <span class="subst">&#123;data&#125;</span>'</span>)</span><br><span class="line">        self.data = data</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'in get func'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.data</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print(<span class="string">f'in set, value is <span class="subst">&#123;value&#125;</span>'</span>)</span><br><span class="line">        self.value = value</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span><span class="params">(object)</span>:</span></span><br><span class="line">    x = Desc(<span class="number">10</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.x = data</span><br><span class="line">e = E(<span class="number">5</span>)</span><br><span class="line">print(e.x)</span><br></pre></td></tr></table></figure><p>Try to comment <code>func __set__</code>, then think about <code>what&amp;why</code> the result are different.</p><h1 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h1><p>It’s become a <code>non-data descriptor</code> when <code>func __set__</code> is commented.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Do&quot;&gt;&lt;a href=&quot;#Do&quot; class=&quot;headerlink&quot; title=&quot;Do&quot;&gt;&lt;/a&gt;Do&lt;/h1&gt;&lt;p&gt;read it below&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.codewalker.me/tags/python/"/>
    
      <category term="descriptor" scheme="https://blog.codewalker.me/tags/descriptor/"/>
    
  </entry>
  
  <entry>
    <title>Know Mixin in Python</title>
    <link href="https://blog.codewalker.me/2018/07/18/Know-Mixin-in-Python/"/>
    <id>https://blog.codewalker.me/2018/07/18/Know-Mixin-in-Python/</id>
    <published>2018-07-18T05:21:41.000Z</published>
    <updated>2018-07-19T09:27:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Extension-boom"><a href="#Extension-boom" class="headerlink" title="Extension boom"></a>Extension boom</h1><h2 id="Imaine"><a href="#Imaine" class="headerlink" title="Imaine"></a>Imaine</h2><p>there is a fruit shop and it sells <code>apple</code>, <code>banana</code>,<code>pineapple</code>,<code>watermelon</code>.then we can define like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pineapple</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watermelon</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>That’s so easy!</p><h2 id="One-day"><a href="#One-day" class="headerlink" title="One day"></a>One day</h2><p>The owner need to distinguish local and foreign fruit. No problem, let’s extending them.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalityFruit</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">locality</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonLocalityFruit</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">locality</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span><span class="params">(LocalityFruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span><span class="params">(NonLocalityFruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana</span><span class="params">(LocalityFruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana</span><span class="params">(NonLocalityFruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="Another-day"><a href="#Another-day" class="headerlink" title="Another day"></a>Another day</h2><p>Owner need to distinguish pare or not fruit. WTH, kill me now please.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalityFruit</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">locality</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonLocalityFruit</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">locality</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PareLocalFruit</span><span class="params">(LocalityFruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">need_pare</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PareNonLocalFruit</span><span class="params">(NonLocalityFruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">need_pare</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonPareLocalFruit</span><span class="params">(LocalityFruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">need_pare</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonPareNonLocalFruit</span><span class="params">(NonLocalityFruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">need_pare</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple1</span><span class="params">(PareLocalFruit)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple2</span><span class="params">(PareNonLocalFruit)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple3</span><span class="params">(NonPareLocalFruit)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple4</span><span class="params">(NonPareNonLocalFruit)</span>:</span><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana1</span><span class="params">(PareLocalFruit)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana2</span><span class="params">(PareNonLocalFruit)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana3</span><span class="params">(NonPareLocalFruit)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana4</span><span class="params">(NonPareNonLocalFruit)</span>:</span><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="Another-day-again"><a href="#Another-day-again" class="headerlink" title="Another day again"></a>Another day again</h2><p>Owner need ……. Owner is dead because we kill him/her</p><p><code>Class</code> will be exploded.</p><h1 id="Howto"><a href="#Howto" class="headerlink" title="Howto"></a>Howto</h1><p>In Python, we could use <code>Mixin</code> and we can write those class like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalityMixin</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">locality</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonLocalityMixin</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">locality</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PareMixin</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">need_pare</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonPareMixin</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">need_pare</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple1</span><span class="params">(Fruit, LocalityMixin, PareMixin)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple2</span><span class="params">(Fruit, NonLocalityMixin, PareMixin)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple3</span><span class="params">(Fruit, LocalityMixin, NonPareMixin)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple3</span><span class="params">(Fruit, NonLocalityMixin, NonPareMixin)</span>:</span><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>If you know <code>Java</code>, it just like <code>implements</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">C</span>,<span class="title">D</span>,<span class="title">E</span>,<span class="title">F</span></span></span><br><span class="line"><span class="class">...</span></span><br></pre></td></tr></table></figure><p>Python make it simple and easy.</p><p>I love this world.</p><p>EOF.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Extension-boom&quot;&gt;&lt;a href=&quot;#Extension-boom&quot; class=&quot;headerlink&quot; title=&quot;Extension boom&quot;&gt;&lt;/a&gt;Extension boom&lt;/h1&gt;&lt;h2 id=&quot;Imaine&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.codewalker.me/tags/python/"/>
    
      <category term="mixin" scheme="https://blog.codewalker.me/tags/mixin/"/>
    
  </entry>
  
  <entry>
    <title>Knowing property in python</title>
    <link href="https://blog.codewalker.me/2018/07/18/Knowing-property-in-python/"/>
    <id>https://blog.codewalker.me/2018/07/18/Knowing-property-in-python/</id>
    <published>2018-07-17T16:01:18.000Z</published>
    <updated>2018-07-18T03:49:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>At last post we’ve known descriptor. Yes, it’s hard to understand but good to know.</p><h1 id="property-is-a-Decorator-Descriptor"><a href="#property-is-a-Decorator-Descriptor" class="headerlink" title="@property is a Decorator + Descriptor"></a>@property is a <strong>Decorator</strong> + <strong>Descriptor</strong></h1><p>In fact <code>@property</code> is a kind of syntactic sugar. To implement <code>getter</code> or <code>setter</code> easier and more elegant.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-07-17 23:36:36</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.me)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurrentDate</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> datetime.date.today()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"Can't change the current date."</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(object)</span>:</span></span><br><span class="line">    date = CurrentDate()</span><br><span class="line"></span><br><span class="line">e = Example()</span><br><span class="line">print(e.date)</span><br><span class="line"><span class="comment"># raise a exception: NotImplementedError: Can't change the current date.</span></span><br><span class="line"><span class="comment">#e.date = datetime.date.today() </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example2</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">password</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">"Cant's get value of password"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @password.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">password</span><span class="params">(self, password)</span>:</span></span><br><span class="line">        self.password_hash = password</span><br><span class="line"></span><br><span class="line">e2 = Example2(<span class="string">'Alice'</span>)</span><br><span class="line">e2.password = <span class="string">'your_password'</span></span><br><span class="line"><span class="comment">#print(e2.password) #AttributeError: Cant's get value of password</span></span><br></pre></td></tr></table></figure><p>Think about those two ways to get/set variable by some conditions.</p><h2 id="Notice"><a href="#Notice" class="headerlink" title="Notice:"></a>Notice:</h2><p>Once a func was decorated by <code>@property</code>. it becomes a value setter.</p><p>I love this world, Good night &lt;3</p><p>EOF.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;At last post we’ve known descriptor. Yes, it’s hard to understand but good to know.&lt;/p&gt;
&lt;h1 id=&quot;property-is-a-Decorator-Descriptor&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.codewalker.me/tags/python/"/>
    
      <category term="property" scheme="https://blog.codewalker.me/tags/property/"/>
    
  </entry>
  
  <entry>
    <title>Knowing descriptor in Python</title>
    <link href="https://blog.codewalker.me/2018/07/17/Knowing-descriptor-in-Python/"/>
    <id>https://blog.codewalker.me/2018/07/17/Knowing-descriptor-in-Python/</id>
    <published>2018-07-17T13:53:15.000Z</published>
    <updated>2018-07-17T15:41:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Read-it-below-carefully"><a href="#Read-it-below-carefully" class="headerlink" title="Read it below carefully"></a>Read it below carefully</h1><figure class="highlight python"><figcaption><span>knowing_descriptor_1.py</span><a href="/downloads/code/knowing_descriptor_1.py">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-07-16 17:17:42</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.meg)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span><span class="params">(object)</span>:</span>                                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, v)</span>:</span>   </span><br><span class="line">        print(<span class="string">'init P'</span>) <span class="comment"># A0 step 1.1  </span></span><br><span class="line">        self.data = v                                         </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, ins, cls)</span>:</span>   </span><br><span class="line">        print(<span class="string">f'from ins:<span class="subst">{ins.__dict__}</span> get <span class="subst">{self.data}</span> &amp; cls:<span class="subst">{cls}</span>'</span>)  <span class="comment"># B0   </span></span><br><span class="line">        <span class="keyword">return</span> self.data                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, ins, v)</span>:</span> </span><br><span class="line">        print(<span class="string">f'save <span class="subst">{v}</span> to <span class="subst">{ins.__dict__}</span>'</span>)    <span class="comment"># step 2.1.1      </span></span><br><span class="line">        self.data = v                   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, ins)</span>:</span>          </span><br><span class="line">        <span class="keyword">del</span> self.data                   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span>:</span>                                </span><br><span class="line">    name = P(<span class="string">'Alice'</span>)   <span class="comment"># A0 step 1                    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, v)</span>:</span>  <span class="comment"># A0 step 2</span></span><br><span class="line">        print(<span class="string">'init name'</span>)           </span><br><span class="line">        self.name = v       <span class="comment"># A0 step 2.1</span></span><br><span class="line">                            <span class="comment"># Call P when set name = v and cover 'Alice' to 'Bob'. </span></span><br><span class="line">                            <span class="comment"># Notice: Now we're NOT create instance for Person</span></span><br><span class="line">        print(<span class="string">'init street'</span>)                 </span><br><span class="line">        self.street = v     <span class="comment"># A0 step 3</span></span><br><span class="line"></span><br><span class="line">obj = Person(<span class="string">'Bob'</span>) <span class="comment">#  step A0 init P before init Person </span></span><br><span class="line">print(<span class="string">f'Does obj have name? <span class="subst">{ hasattr(obj, <span class="string">"name"</span>) }</span>'</span>)</span><br><span class="line">print(<span class="string">'-'</span>*<span class="number">20</span>)</span><br><span class="line">print(<span class="string">f'obj has:<span class="subst">{obj.__dict__}</span>'</span>)    <span class="comment"># obj has no name, because of P hold name variable???    </span></span><br><span class="line">print(<span class="string">f'Does obj have name? <span class="subst">{ hasattr(obj, <span class="string">"name"</span>) }</span>'</span>)</span><br><span class="line">print(<span class="string">f'Now will get name:<span class="subst">{obj.name}</span>'</span>) <span class="comment"># B0. Because of descript name</span></span><br><span class="line">                                    <span class="comment"># So call P.__get__ first before get name's value</span></span><br><span class="line">print(<span class="string">'-'</span>*<span class="number">20</span>)</span><br><span class="line">print(<span class="string">'Now will get street:{obj.street}'</span>)   <span class="comment"># We are NOT descript street</span></span><br><span class="line">                                            <span class="comment"># so will not call any func from P</span></span><br><span class="line">obj.name = <span class="string">'Charley'</span>    <span class="comment"># call P.__set__ again</span></span><br><span class="line">                        <span class="comment"># Notice: instance obj has no name, because of P hold name variable</span></span><br><span class="line">print(<span class="string">f'Does obj have name? <span class="subst">{ hasattr(obj, <span class="string">"name"</span>) }</span>'</span>)</span><br><span class="line">print(<span class="string">f'get name from <span class="subst">{obj}</span>: <span class="subst">{obj.name}</span>'</span>)</span><br><span class="line">print(<span class="string">f'del name'</span>)</span><br><span class="line"><span class="keyword">del</span> obj.name</span><br><span class="line">print(<span class="string">f'Does obj have name? <span class="subst">{ hasattr(obj, <span class="string">"name"</span>) }</span>'</span>)</span><br><span class="line">obj.name = <span class="string">'Doggie'</span> <span class="comment"># set name = Doggie</span></span><br><span class="line">print(<span class="string">f'Does obj have name? <span class="subst">{ hasattr(obj, <span class="string">"name"</span>) }</span>'</span>)</span><br><span class="line">print(<span class="string">'-'</span>*<span class="number">20</span>)</span><br><span class="line">print(type(obj).__dict__[<span class="string">'name'</span>].__get__(obj, type(obj)))</span><br><span class="line">print(<span class="string">'-'</span>*<span class="number">20</span>)</span><br><span class="line">print(type(obj).__dict__[<span class="string">'name'</span>].__get__(obj, type(obj)) <span class="keyword">is</span> obj.name)</span><br><span class="line"><span class="comment"># In fact call obj.name is transfering to call type(obj).__dict__['name'].__get__(obj, type(obj))</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Read-it-below-carefully&quot;&gt;&lt;a href=&quot;#Read-it-below-carefully&quot; class=&quot;headerlink&quot; title=&quot;Read it below carefully&quot;&gt;&lt;/a&gt;Read it below car
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.codewalker.me/tags/python/"/>
    
      <category term="descriptor" scheme="https://blog.codewalker.me/tags/descriptor/"/>
    
  </entry>
  
  <entry>
    <title>using code_dir on a elegant way</title>
    <link href="https://blog.codewalker.me/2018/07/17/using-code-dir-in-elegant-way/"/>
    <id>https://blog.codewalker.me/2018/07/17/using-code-dir-in-elegant-way/</id>
    <published>2018-07-17T08:39:19.000Z</published>
    <updated>2018-07-17T09:10:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Howto"><a href="#Howto" class="headerlink" title="Howto"></a>Howto</h1><ol><li><p>Create folders if not exist.</p><p> In your hexo root.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="built_in">source</span>/downloads/code</span><br></pre></td></tr></table></figure></li><li><p>Include your source code in your post</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code base_socket_client lang:python base_socket_client.py %&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><figure class="highlight python"><figcaption><span>base_socket_client.py</span><a href="/downloads/code/base_socket_client.py">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-07-15 12:55:35</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.meg)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Main</span><span class="params">()</span>:</span></span><br><span class="line">        host = <span class="string">'127.0.0.1'</span></span><br><span class="line">        port = <span class="number">5000</span></span><br><span class="line">         </span><br><span class="line">        mySocket = socket.socket()</span><br><span class="line">        mySocket.connect((host,port))</span><br><span class="line">         </span><br><span class="line">        message = input(<span class="string">" -&gt; "</span>)</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">while</span> message != <span class="string">'q'</span>:</span><br><span class="line">                mySocket.send(message.encode())</span><br><span class="line">                data = mySocket.recv(<span class="number">1024</span>).decode()</span><br><span class="line">                 </span><br><span class="line">                <span class="keyword">print</span> (<span class="string">'Received from server: '</span> + data)</span><br><span class="line">                 </span><br><span class="line">                message = input(<span class="string">" -&gt; "</span>)</span><br><span class="line">                 </span><br><span class="line">        mySocket.close()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    Main()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'xxxx'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Howto&quot;&gt;&lt;a href=&quot;#Howto&quot; class=&quot;headerlink&quot; title=&quot;Howto&quot;&gt;&lt;/a&gt;Howto&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create folders if not exist.&lt;/p&gt;
&lt;p&gt; In your hexo
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://blog.codewalker.me/tags/hexo/"/>
    
      <category term="howto" scheme="https://blog.codewalker.me/tags/howto/"/>
    
  </entry>
  
  <entry>
    <title>sina api v1.5.4 trade_related_no</title>
    <link href="https://blog.codewalker.me/2018/07/17/sina-api-v1-5-4-trade-related-no/"/>
    <id>https://blog.codewalker.me/2018/07/17/sina-api-v1-5-4-trade-related-no/</id>
    <published>2018-07-17T03:09:34.000Z</published>
    <updated>2018-07-17T03:11:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口改造"><a href="#接口改造" class="headerlink" title="接口改造"></a>接口改造</h1><pre><code>- 代收    1. **create_hosting_collect_trade**    2. 投资    3. 还本金    4. 充值利息    5. 充值本金    6. 债权认购-投资人扣款- 代付    1. **create_single_hosting_pay_trade**    2. 发放利息    3. 放款        - 到存钱罐账户        - **create_single_hosting_pay_to_card_trade**到银行卡    4. 还款本金    5. 债权成功回调-债权人收钱    6. 投资退款    7. 债券退款- 交易关联号查询</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;接口改造&quot;&gt;&lt;a href=&quot;#接口改造&quot; class=&quot;headerlink&quot; title=&quot;接口改造&quot;&gt;&lt;/a&gt;接口改造&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- 代收

    1. **create_hosting_collect_trade**

    2. 
      
    
    </summary>
    
    
      <category term="php" scheme="https://blog.codewalker.me/tags/php/"/>
    
      <category term="sina" scheme="https://blog.codewalker.me/tags/sina/"/>
    
  </entry>
  
</feed>
