<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simon Xie</title>
  <icon>https://www.gravatar.com/avatar/32db771918c67cb8f4969f34b77012cf</icon>
  <subtitle>All magic comess with a price.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.codewalker.me/"/>
  <updated>2018-07-23T08:06:34.000Z</updated>
  <id>https://blog.codewalker.me/</id>
  
  <author>
    <name>Simon Xie</name>
    <email>simon.xie@codewalker.me</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>let&#39;t your site fly</title>
    <link href="https://blog.codewalker.me/2018/07/23/let-t-your-site-fly/"/>
    <id>https://blog.codewalker.me/2018/07/23/let-t-your-site-fly/</id>
    <published>2018-07-23T07:40:48.000Z</published>
    <updated>2018-07-23T08:06:34.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Intor</li></ol><blockquote><p>“Builds can be the most awful sinkhole for teams to waste their time with - gulp is a serious win for any project.”<br>Eric, Co-founder @ stae</p></blockquote><ol><li><p>Get ready</p><ul><li><p>Install <code>gulp</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp</span><br></pre></td></tr></table></figure></li><li><p>Install plugins</p><ul><li>gulp-minify-css</li><li>gulp-uglify</li><li>gulp-htmlmin</li><li>gulp-htmlclean<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-minify-css</span><br></pre></td></tr></table></figure></li></ul><p>ETC…</p></li></ul></li><li><p>Configuration<br> Write your own <code>gulpfile.js</code> &amp; put it in your root dir</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> debug = <span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录 css文件</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/css/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录 html文件</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">        minifyJS: <span class="literal">true</span>,</span><br><span class="line">        minifyCSS: <span class="literal">true</span>,</span><br><span class="line">        minifyURLs: <span class="literal">true</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/js 目录 js文件</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/js/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'hexo'</span>, [</span><br><span class="line">    <span class="string">'minify-html'</span>,<span class="string">'minify-css'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></li><li><p>Deploy</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">gulp hexo</span><br><span class="line">hexo deply</span><br></pre></td></tr></table></figure><p>Done.<br>EOF.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;Intor&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;“Builds can be the most awful sinkhole for teams to waste their time with - gulp is a serious win 
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://blog.codewalker.me/tags/hexo/"/>
    
      <category term="frontend" scheme="https://blog.codewalker.me/tags/frontend/"/>
    
  </entry>
  
  <entry>
    <title>Baidu optimization</title>
    <link href="https://blog.codewalker.me/2018/07/23/Baidu-seo/"/>
    <id>https://blog.codewalker.me/2018/07/23/Baidu-seo/</id>
    <published>2018-07-23T05:40:39.000Z</published>
    <updated>2018-07-23T07:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Into"><a href="#Into" class="headerlink" title="Into"></a>Into</h1><p>Nothing to say…</p><h2 id="Install-two-plugins"><a href="#Install-two-plugins" class="headerlink" title="Install two plugins"></a>Install two plugins</h2><ul><li>hexo-generator-baidu-sitemap</li><li>hexo-baidu-url-submit</li></ul><h3 id="hexo-generator-baidu-sitemap"><a href="#hexo-generator-baidu-sitemap" class="headerlink" title="hexo-generator-baidu-sitemap"></a>hexo-generator-baidu-sitemap</h3><ul><li>Installation</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><ul><li>Setup</li></ul><p>In you <code>_config.yml</code> add:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure><ul><li>Use</li></ul><p>It’s will create a file named <code>baidusitemap.xml</code> automaticlly when you deploy your to GitHub</p><h3 id="hexo-baidu-url-submit"><a href="#hexo-baidu-url-submit" class="headerlink" title="hexo-baidu-url-submit"></a>hexo-baidu-url-submit</h3><ul><li>Installation</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><ul><li>Setup</li></ul><p>In you <code>_config.yml</code> add:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 3 <span class="comment">### last 3 urls will be submitted</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># your site domain</span></span><br><span class="line">  <span class="comment"># just like: url: http://www.yourdomain.com before you see</span></span><br><span class="line">  <span class="comment"># notice without 'http://' or 'https://'</span></span><br><span class="line">  host: www.yourdomain.com</span><br><span class="line"></span><br><span class="line">  <span class="comment"># your token here.</span></span><br><span class="line">  <span class="comment"># find out in 'https://ziyuan.baidu.com/linksubmit/index?site=http://www.yourdomain.com/'</span></span><br><span class="line">  token: your-token-here</span><br><span class="line">  path: baidu_urls.txt</span><br></pre></td></tr></table></figure><p>and add <code>- type: baidu_url_submitter</code> to your config.yml:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - <span class="built_in">type</span>: git</span><br><span class="line">    repo: who@github.com:who/repo.address.git</span><br><span class="line">    branch: master</span><br><span class="line">  - <span class="built_in">type</span>: baidu_url_submitter</span><br></pre></td></tr></table></figure><ul><li><p>principle</p><ol><li>Create baidu_urls.txt and filled last 3 ursl in it when <code>hexo denerate</code>.</li><li>Submiting your 3 new urls to baidu when <code>hexo deploy</code>, also it will submit to Git whilc is your another source in <code>_config.yml</code></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Into&quot;&gt;&lt;a href=&quot;#Into&quot; class=&quot;headerlink&quot; title=&quot;Into&quot;&gt;&lt;/a&gt;Into&lt;/h1&gt;&lt;p&gt;Nothing to say…&lt;/p&gt;
&lt;h2 id=&quot;Install-two-plugins&quot;&gt;&lt;a href=&quot;#Ins
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://blog.codewalker.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>__name__ comprehension</title>
    <link href="https://blog.codewalker.me/2018/07/21/name-comprehension/"/>
    <id>https://blog.codewalker.me/2018/07/21/name-comprehension/</id>
    <published>2018-07-21T04:49:37.000Z</published>
    <updated>2018-07-21T06:01:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intor"><a href="#Intor" class="headerlink" title="Intor"></a>Intor</h1><p><code>__name__</code> is one such special variable. If the source file is executed as the main program, the interpreter sets the <code>__name__</code> variable to have a value <code>__main__</code>. If this file is being imported from another module, <code>__name__</code> will be set to the module’s name.<br><code>__name__</code> is a built-in variable which evaluates to the name of the current module. Thus it can be used to check whether the current script is being run on its own or being imported somewhere else by combining it with if statement</p><h1 id="Using"><a href="#Using" class="headerlink" title="Using"></a>Using</h1><h2 id="As-main-srcipt"><a href="#As-main-srcipt" class="headerlink" title="As main srcipt"></a>As main srcipt</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-07-21 12:59:29</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.meg)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"><span class="comment"># @filename: first_module.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">f'Run first as <span class="subst">&#123;__name__&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">f'Run first as Import <span class="subst">&#123;__name__&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><h2 id="As-a-module"><a href="#As-a-module" class="headerlink" title="As a module"></a>As a module</h2><p>Import <code>first_module.py</code> module as a module</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-07-21 13:00:31</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.meg)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"><span class="comment"># @Filename: second_module.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> first_module</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">second_main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f'Run second as <span class="subst">&#123;__name__&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    second_main()</span><br></pre></td></tr></table></figure><h2 id="See-what’s-the-different-of-name"><a href="#See-what’s-the-different-of-name" class="headerlink" title="See what’s the different of __name__"></a>See what’s the different of <code>__name__</code></h2><h3 id="Round-one"><a href="#Round-one" class="headerlink" title="Round one"></a>Round one</h3><p>We run <code>first_module.py</code> directly, it will show us <code>Run first as __main__</code>, because we check the value of <code>__name__</code>. Obvisously it’s.</p><h3 id="Round-two"><a href="#Round-two" class="headerlink" title="Round two"></a>Round two</h3><p>Running <code>second_module.py</code>. it shows us <code>Run first as Import first_module</code>. Here, we’ve known the value of <code>__name__</code> will be changed. At first script it’s value is ‘<strong>main</strong>‘ as main level, but it has changed to <strong>module name</strong> when we import it as a module.</p><p>EOF.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Intor&quot;&gt;&lt;a href=&quot;#Intor&quot; class=&quot;headerlink&quot; title=&quot;Intor&quot;&gt;&lt;/a&gt;Intor&lt;/h1&gt;&lt;p&gt;&lt;code&gt;__name__&lt;/code&gt; is one such special variable. If the
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.codewalker.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Knowing descriptor in Python 2</title>
    <link href="https://blog.codewalker.me/2018/07/18/Knowing-descriptor-in-Python-2/"/>
    <id>https://blog.codewalker.me/2018/07/18/Knowing-descriptor-in-Python-2/</id>
    <published>2018-07-18T13:53:15.000Z</published>
    <updated>2018-07-19T09:27:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Do"><a href="#Do" class="headerlink" title="Do"></a>Do</h1><p>read it below</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-07-18 10:21:16</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.meg)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Desc</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        print(<span class="string">f'in init, data is: <span class="subst">&#123;data&#125;</span>'</span>)</span><br><span class="line">        self.data = data</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'in get func'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.data</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print(<span class="string">f'in set, value is <span class="subst">&#123;value&#125;</span>'</span>)</span><br><span class="line">        self.value = value</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span><span class="params">(object)</span>:</span></span><br><span class="line">    x = Desc(<span class="number">10</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.x = data</span><br><span class="line">e = E(<span class="number">5</span>)</span><br><span class="line">print(e.x)</span><br></pre></td></tr></table></figure><p>Try to comment <code>func __set__</code>, then think about <code>what&amp;why</code> the result are different.</p><h1 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h1><p>It’s become a <code>non-data descriptor</code> when <code>func __set__</code> is commented.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Do&quot;&gt;&lt;a href=&quot;#Do&quot; class=&quot;headerlink&quot; title=&quot;Do&quot;&gt;&lt;/a&gt;Do&lt;/h1&gt;&lt;p&gt;read it below&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.codewalker.me/tags/python/"/>
    
      <category term="descriptor" scheme="https://blog.codewalker.me/tags/descriptor/"/>
    
  </entry>
  
  <entry>
    <title>Know Mixin in Python</title>
    <link href="https://blog.codewalker.me/2018/07/18/Know-Mixin-in-Python/"/>
    <id>https://blog.codewalker.me/2018/07/18/Know-Mixin-in-Python/</id>
    <published>2018-07-18T05:21:41.000Z</published>
    <updated>2018-07-19T09:27:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Extension-boom"><a href="#Extension-boom" class="headerlink" title="Extension boom"></a>Extension boom</h1><h2 id="Imaine"><a href="#Imaine" class="headerlink" title="Imaine"></a>Imaine</h2><p>there is a fruit shop and it sells <code>apple</code>, <code>banana</code>,<code>pineapple</code>,<code>watermelon</code>.then we can define like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pineapple</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watermelon</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>That’s so easy!</p><h2 id="One-day"><a href="#One-day" class="headerlink" title="One day"></a>One day</h2><p>The owner need to distinguish local and foreign fruit. No problem, let’s extending them.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalityFruit</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">locality</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonLocalityFruit</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">locality</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span><span class="params">(LocalityFruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span><span class="params">(NonLocalityFruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana</span><span class="params">(LocalityFruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana</span><span class="params">(NonLocalityFruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="Another-day"><a href="#Another-day" class="headerlink" title="Another day"></a>Another day</h2><p>Owner need to distinguish pare or not fruit. WTH, kill me now please.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalityFruit</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">locality</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonLocalityFruit</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">locality</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PareLocalFruit</span><span class="params">(LocalityFruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">need_pare</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PareNonLocalFruit</span><span class="params">(NonLocalityFruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">need_pare</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonPareLocalFruit</span><span class="params">(LocalityFruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">need_pare</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonPareNonLocalFruit</span><span class="params">(NonLocalityFruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">need_pare</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple1</span><span class="params">(PareLocalFruit)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple2</span><span class="params">(PareNonLocalFruit)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple3</span><span class="params">(NonPareLocalFruit)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple4</span><span class="params">(NonPareNonLocalFruit)</span>:</span><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana1</span><span class="params">(PareLocalFruit)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana2</span><span class="params">(PareNonLocalFruit)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana3</span><span class="params">(NonPareLocalFruit)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana4</span><span class="params">(NonPareNonLocalFruit)</span>:</span><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="Another-day-again"><a href="#Another-day-again" class="headerlink" title="Another day again"></a>Another day again</h2><p>Owner need ……. Owner is dead because we kill him/her</p><p><code>Class</code> will be exploded.</p><h1 id="Howto"><a href="#Howto" class="headerlink" title="Howto"></a>Howto</h1><p>In Python, we could use <code>Mixin</code> and we can write those class like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalityMixin</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">locality</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonLocalityMixin</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">locality</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PareMixin</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">need_pare</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonPareMixin</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">need_pare</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple1</span><span class="params">(Fruit, LocalityMixin, PareMixin)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple2</span><span class="params">(Fruit, NonLocalityMixin, PareMixin)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple3</span><span class="params">(Fruit, LocalityMixin, NonPareMixin)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple3</span><span class="params">(Fruit, NonLocalityMixin, NonPareMixin)</span>:</span><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>If you know <code>Java</code>, it just like <code>implements</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">C</span>,<span class="title">D</span>,<span class="title">E</span>,<span class="title">F</span></span></span><br><span class="line"><span class="class">...</span></span><br></pre></td></tr></table></figure><p>Python make it simple and easy.</p><p>I love this world.</p><p>EOF.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Extension-boom&quot;&gt;&lt;a href=&quot;#Extension-boom&quot; class=&quot;headerlink&quot; title=&quot;Extension boom&quot;&gt;&lt;/a&gt;Extension boom&lt;/h1&gt;&lt;h2 id=&quot;Imaine&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.codewalker.me/tags/python/"/>
    
      <category term="mixin" scheme="https://blog.codewalker.me/tags/mixin/"/>
    
  </entry>
  
  <entry>
    <title>Knowing property in python</title>
    <link href="https://blog.codewalker.me/2018/07/18/Knowing-property-in-python/"/>
    <id>https://blog.codewalker.me/2018/07/18/Knowing-property-in-python/</id>
    <published>2018-07-17T16:01:18.000Z</published>
    <updated>2018-07-18T03:49:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>At last post we’ve known descriptor. Yes, it’s hard to understand but good to know.</p><h1 id="property-is-a-Decorator-Descriptor"><a href="#property-is-a-Decorator-Descriptor" class="headerlink" title="@property is a Decorator + Descriptor"></a>@property is a <strong>Decorator</strong> + <strong>Descriptor</strong></h1><p>In fact <code>@property</code> is a kind of syntactic sugar. To implement <code>getter</code> or <code>setter</code> easier and more elegant.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-07-17 23:36:36</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.me)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurrentDate</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> datetime.date.today()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"Can't change the current date."</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(object)</span>:</span></span><br><span class="line">    date = CurrentDate()</span><br><span class="line"></span><br><span class="line">e = Example()</span><br><span class="line">print(e.date)</span><br><span class="line"><span class="comment"># raise a exception: NotImplementedError: Can't change the current date.</span></span><br><span class="line"><span class="comment">#e.date = datetime.date.today() </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example2</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">password</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">"Cant's get value of password"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @password.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">password</span><span class="params">(self, password)</span>:</span></span><br><span class="line">        self.password_hash = password</span><br><span class="line"></span><br><span class="line">e2 = Example2(<span class="string">'Alice'</span>)</span><br><span class="line">e2.password = <span class="string">'your_password'</span></span><br><span class="line"><span class="comment">#print(e2.password) #AttributeError: Cant's get value of password</span></span><br></pre></td></tr></table></figure><p>Think about those two ways to get/set variable by some conditions.</p><h2 id="Notice"><a href="#Notice" class="headerlink" title="Notice:"></a>Notice:</h2><p>Once a func was decorated by <code>@property</code>. it becomes a value setter.</p><p>I love this world, Good night &lt;3</p><p>EOF.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;At last post we’ve known descriptor. Yes, it’s hard to understand but good to know.&lt;/p&gt;
&lt;h1 id=&quot;property-is-a-Decorator-Descriptor&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.codewalker.me/tags/python/"/>
    
      <category term="property" scheme="https://blog.codewalker.me/tags/property/"/>
    
  </entry>
  
  <entry>
    <title>Knowing descriptor in Python</title>
    <link href="https://blog.codewalker.me/2018/07/17/Knowing-descriptor-in-Python/"/>
    <id>https://blog.codewalker.me/2018/07/17/Knowing-descriptor-in-Python/</id>
    <published>2018-07-17T13:53:15.000Z</published>
    <updated>2018-07-17T15:41:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Read-it-below-carefully"><a href="#Read-it-below-carefully" class="headerlink" title="Read it below carefully"></a>Read it below carefully</h1><figure class="highlight python"><figcaption><span>knowing_descriptor_1.py</span><a href="/downloads/code/knowing_descriptor_1.py">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-07-16 17:17:42</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.meg)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span><span class="params">(object)</span>:</span>                                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, v)</span>:</span>   </span><br><span class="line">        print(<span class="string">'init P'</span>) <span class="comment"># A0 step 1.1  </span></span><br><span class="line">        self.data = v                                         </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, ins, cls)</span>:</span>   </span><br><span class="line">        print(<span class="string">f'from ins:<span class="subst">{ins.__dict__}</span> get <span class="subst">{self.data}</span> &amp; cls:<span class="subst">{cls}</span>'</span>)  <span class="comment"># B0   </span></span><br><span class="line">        <span class="keyword">return</span> self.data                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, ins, v)</span>:</span> </span><br><span class="line">        print(<span class="string">f'save <span class="subst">{v}</span> to <span class="subst">{ins.__dict__}</span>'</span>)    <span class="comment"># step 2.1.1      </span></span><br><span class="line">        self.data = v                   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, ins)</span>:</span>          </span><br><span class="line">        <span class="keyword">del</span> self.data                   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span>:</span>                                </span><br><span class="line">    name = P(<span class="string">'Alice'</span>)   <span class="comment"># A0 step 1                    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, v)</span>:</span>  <span class="comment"># A0 step 2</span></span><br><span class="line">        print(<span class="string">'init name'</span>)           </span><br><span class="line">        self.name = v       <span class="comment"># A0 step 2.1</span></span><br><span class="line">                            <span class="comment"># Call P when set name = v and cover 'Alice' to 'Bob'. </span></span><br><span class="line">                            <span class="comment"># Notice: Now we're NOT create instance for Person</span></span><br><span class="line">        print(<span class="string">'init street'</span>)                 </span><br><span class="line">        self.street = v     <span class="comment"># A0 step 3</span></span><br><span class="line"></span><br><span class="line">obj = Person(<span class="string">'Bob'</span>) <span class="comment">#  step A0 init P before init Person </span></span><br><span class="line">print(<span class="string">f'Does obj have name? <span class="subst">{ hasattr(obj, <span class="string">"name"</span>) }</span>'</span>)</span><br><span class="line">print(<span class="string">'-'</span>*<span class="number">20</span>)</span><br><span class="line">print(<span class="string">f'obj has:<span class="subst">{obj.__dict__}</span>'</span>)    <span class="comment"># obj has no name, because of P hold name variable???    </span></span><br><span class="line">print(<span class="string">f'Does obj have name? <span class="subst">{ hasattr(obj, <span class="string">"name"</span>) }</span>'</span>)</span><br><span class="line">print(<span class="string">f'Now will get name:<span class="subst">{obj.name}</span>'</span>) <span class="comment"># B0. Because of descript name</span></span><br><span class="line">                                    <span class="comment"># So call P.__get__ first before get name's value</span></span><br><span class="line">print(<span class="string">'-'</span>*<span class="number">20</span>)</span><br><span class="line">print(<span class="string">'Now will get street:{obj.street}'</span>)   <span class="comment"># We are NOT descript street</span></span><br><span class="line">                                            <span class="comment"># so will not call any func from P</span></span><br><span class="line">obj.name = <span class="string">'Charley'</span>    <span class="comment"># call P.__set__ again</span></span><br><span class="line">                        <span class="comment"># Notice: instance obj has no name, because of P hold name variable</span></span><br><span class="line">print(<span class="string">f'Does obj have name? <span class="subst">{ hasattr(obj, <span class="string">"name"</span>) }</span>'</span>)</span><br><span class="line">print(<span class="string">f'get name from <span class="subst">{obj}</span>: <span class="subst">{obj.name}</span>'</span>)</span><br><span class="line">print(<span class="string">f'del name'</span>)</span><br><span class="line"><span class="keyword">del</span> obj.name</span><br><span class="line">print(<span class="string">f'Does obj have name? <span class="subst">{ hasattr(obj, <span class="string">"name"</span>) }</span>'</span>)</span><br><span class="line">obj.name = <span class="string">'Doggie'</span> <span class="comment"># set name = Doggie</span></span><br><span class="line">print(<span class="string">f'Does obj have name? <span class="subst">{ hasattr(obj, <span class="string">"name"</span>) }</span>'</span>)</span><br><span class="line">print(<span class="string">'-'</span>*<span class="number">20</span>)</span><br><span class="line">print(type(obj).__dict__[<span class="string">'name'</span>].__get__(obj, type(obj)))</span><br><span class="line">print(<span class="string">'-'</span>*<span class="number">20</span>)</span><br><span class="line">print(type(obj).__dict__[<span class="string">'name'</span>].__get__(obj, type(obj)) <span class="keyword">is</span> obj.name)</span><br><span class="line"><span class="comment"># In fact call obj.name is transfering to call type(obj).__dict__['name'].__get__(obj, type(obj))</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Read-it-below-carefully&quot;&gt;&lt;a href=&quot;#Read-it-below-carefully&quot; class=&quot;headerlink&quot; title=&quot;Read it below carefully&quot;&gt;&lt;/a&gt;Read it below car
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.codewalker.me/tags/python/"/>
    
      <category term="descriptor" scheme="https://blog.codewalker.me/tags/descriptor/"/>
    
  </entry>
  
  <entry>
    <title>using code_dir on a elegant way</title>
    <link href="https://blog.codewalker.me/2018/07/17/using-code-dir-in-elegant-way/"/>
    <id>https://blog.codewalker.me/2018/07/17/using-code-dir-in-elegant-way/</id>
    <published>2018-07-17T08:39:19.000Z</published>
    <updated>2018-07-17T09:10:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Howto"><a href="#Howto" class="headerlink" title="Howto"></a>Howto</h1><ol><li><p>Create folders if not exist.</p><p> In your hexo root.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="built_in">source</span>/downloads/code</span><br></pre></td></tr></table></figure></li><li><p>Include your source code in your post</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code base_socket_client lang:python base_socket_client.py %&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><figure class="highlight python"><figcaption><span>base_socket_client.py</span><a href="/downloads/code/base_socket_client.py">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-07-15 12:55:35</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.meg)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Main</span><span class="params">()</span>:</span></span><br><span class="line">        host = <span class="string">'127.0.0.1'</span></span><br><span class="line">        port = <span class="number">5000</span></span><br><span class="line">         </span><br><span class="line">        mySocket = socket.socket()</span><br><span class="line">        mySocket.connect((host,port))</span><br><span class="line">         </span><br><span class="line">        message = input(<span class="string">" -&gt; "</span>)</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">while</span> message != <span class="string">'q'</span>:</span><br><span class="line">                mySocket.send(message.encode())</span><br><span class="line">                data = mySocket.recv(<span class="number">1024</span>).decode()</span><br><span class="line">                 </span><br><span class="line">                <span class="keyword">print</span> (<span class="string">'Received from server: '</span> + data)</span><br><span class="line">                 </span><br><span class="line">                message = input(<span class="string">" -&gt; "</span>)</span><br><span class="line">                 </span><br><span class="line">        mySocket.close()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    Main()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'xxxx'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Howto&quot;&gt;&lt;a href=&quot;#Howto&quot; class=&quot;headerlink&quot; title=&quot;Howto&quot;&gt;&lt;/a&gt;Howto&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create folders if not exist.&lt;/p&gt;
&lt;p&gt; In your hexo
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://blog.codewalker.me/tags/hexo/"/>
    
      <category term="howto" scheme="https://blog.codewalker.me/tags/howto/"/>
    
  </entry>
  
  <entry>
    <title>sina api v1.5.4 trade_related_no</title>
    <link href="https://blog.codewalker.me/2018/07/17/sina-api-v1-5-4-trade-related-no/"/>
    <id>https://blog.codewalker.me/2018/07/17/sina-api-v1-5-4-trade-related-no/</id>
    <published>2018-07-17T03:09:34.000Z</published>
    <updated>2018-07-17T03:11:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口改造"><a href="#接口改造" class="headerlink" title="接口改造"></a>接口改造</h1><pre><code>- 代收    1. **create_hosting_collect_trade**    2. 投资    3. 还本金    4. 充值利息    5. 充值本金    6. 债权认购-投资人扣款- 代付    1. **create_single_hosting_pay_trade**    2. 发放利息    3. 放款        - 到存钱罐账户        - **create_single_hosting_pay_to_card_trade**到银行卡    4. 还款本金    5. 债权成功回调-债权人收钱    6. 投资退款    7. 债券退款- 交易关联号查询</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;接口改造&quot;&gt;&lt;a href=&quot;#接口改造&quot; class=&quot;headerlink&quot; title=&quot;接口改造&quot;&gt;&lt;/a&gt;接口改造&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- 代收

    1. **create_hosting_collect_trade**

    2. 
      
    
    </summary>
    
    
      <category term="php" scheme="https://blog.codewalker.me/tags/php/"/>
    
      <category term="sina" scheme="https://blog.codewalker.me/tags/sina/"/>
    
  </entry>
  
  <entry>
    <title>Hexo bind your onw domain</title>
    <link href="https://blog.codewalker.me/2018/07/15/hexo-bind-your-onw-domain/"/>
    <id>https://blog.codewalker.me/2018/07/15/hexo-bind-your-onw-domain/</id>
    <published>2018-07-15T12:39:51.000Z</published>
    <updated>2018-07-17T09:09:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>There’s only <strong>3</strong> stpes to set up.</p><ol><li><p>Create CNAME file<br> Create a file named <strong>CNAME</strong> that path should be <code>/source/CNAME</code> and field in your domain. In my case, it should be <code>blog.codewalker.me</code>. <code>notice</code> There would be no <code>http://</code> or <code>https://</code> etc.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat CNAME</span><br><span class="line">blog.codewalker.me</span><br></pre></td></tr></table></figure></li><li><p>Setup domain<br> Setup you DNS to add a subdomain as CNAME to you GitHub pages domain.<br> Refers mine, it should be <code>blog.codewalker.me</code> to <code>codewalkertse.github.io</code></p></li><li><p>Step 3 or not<br> In my case, I should make <a href="http://codewalker.me" target="_blank" rel="noopener">codewalker.me</a> redirect to <a href="http://blog.codewalker.me">blog.codewalker.me</a>.<br> In my Nginx Server the <code>.conf</code> should be like this:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name codewalker.me www.codewalker.me;</span><br><span class="line">    rewrite ^/(.*) http://blog.codewalker.me/<span class="variable">$1</span> permanent;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> To make all request redirect to blog.codewalker.me by 301 signal.</p></li></ol><p>Have fun with hexo</p><p>I love this world</p><p>EOF</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;There’s only &lt;strong&gt;3&lt;/strong&gt; stpes to set up.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create CNAME file&lt;br&gt; Create a file named &lt;strong&gt;CNAME&lt;/strong&gt; that pa
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://blog.codewalker.me/tags/Hexo/"/>
    
      <category term="Howto" scheme="https://blog.codewalker.me/tags/Howto/"/>
    
  </entry>
  
  <entry>
    <title>Knowing python3 socket deeply</title>
    <link href="https://blog.codewalker.me/2018/07/15/Knowing-python3-socket-deeply/"/>
    <id>https://blog.codewalker.me/2018/07/15/Knowing-python3-socket-deeply/</id>
    <published>2018-07-15T05:08:16.000Z</published>
    <updated>2018-07-17T09:10:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>昨天的<a href="/2018/07/15/Why-there-are-only-request-response-model-but-how-to-explain-push">初识PythonSocket</a>大概讲了下<code>Python Socket</code>的知识，觉得不是很深入(其实这篇也只是个皮毛对知识的一个总结), 觉得理解Socket的原理对自己还是挺有帮助的. 对于 Web 的原理对于为什么 <code>RESTful</code> 为什么会成为Api接口的公认形式的理解还是非常有帮助.在深入之前我们还是首先要理解一些<code>术语</code>.</p><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><blockquote><p>网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket<br>A socket is an endpoint for communication between two machines.</p></blockquote><p>是的，从名字上我们可以知道 <code>Socket</code> 一个管道中两端的末端。试想网络通信好比一个水管，而 <code>Socket</code> 就是入水口(发送方)或是出水口(接收方). 那么既然只是两个端点她就不会在乎中间经过的媒介是什么，是水管(直连)，是游泳池(局域网)，是城市管网(城域网)，是世界地下水系统(Internet)的方式都无所谓了.</p><h2 id="协议-protocol"><a href="#协议-protocol" class="headerlink" title="协议(protocol)"></a>协议(protocol)</h2><h3 id="又称为通信协议"><a href="#又称为通信协议" class="headerlink" title="又称为通信协议"></a>又称为通信协议</h3><blockquote><p>是对数据格式和计算机之间交换数据时必须遵守的规则的正式描述<br>a communication protocol is a system of rules that allow two or more entities of a communications system to transmit information via any kind of variation of a physical quantity.</p></blockquote><p>Socket支持 <code>TCP</code> 以及 <code>UDP</code>. 这里就不扩展开来了.</p><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>服务端，一个用于等待客户端<code>请求</code>以及<code>服务和处理</code>客户端请求的并<code>响应</code>的一端</p><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><p>客户端， 是这个<code>服务</code>的另外一端. 用于发送<code>请求</code>.</p><h1 id="What-we-are-building-我们将要做什么"><a href="#What-we-are-building-我们将要做什么" class="headerlink" title="What we are building 我们将要做什么"></a>What we are building 我们将要做什么</h1><p>我们将要简单的实现一个服务端和一个客户端。 服务端开启了一个<code>Socket</code>端口等待客户端的链接。一旦客户端连接上了，她可以发送一些信息。同时，服务端可以处理(在这里就只是简单的转换为大写)客户端发送过来的信息再返还回客户端.这是很简单感觉但也很直白说明的一种实现方式，基本上都是 <code>等待响应 -&gt; 发送信息 -&gt; 处理信息 -&gt; 返回信息</code> 这样即完成了一次通信.下面我们先来看看代码的实现其实就是昨天的<code>service代码</code>以及今天新增的<code>client代码</code>, 然后在讲讲她们的实现过程.</p><h2 id="创建两个文件"><a href="#创建两个文件" class="headerlink" title="创建两个文件"></a>创建两个文件</h2><ul><li>server.py</li><li>client.py</li></ul><h3 id="server-py"><a href="#server-py" class="headerlink" title="server.py"></a>server.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Main</span><span class="params">()</span>:</span></span><br><span class="line">    host = <span class="string">"127.0.0.1"</span></span><br><span class="line">    port = <span class="number">5000</span></span><br><span class="line">     </span><br><span class="line">    mySocket = socket.socket()</span><br><span class="line">    mySocket.bind((host,port))</span><br><span class="line">     </span><br><span class="line">    mySocket.listen(<span class="number">1</span>)</span><br><span class="line">    conn, addr = mySocket.accept()</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Connection from: "</span> + str(addr))</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>).decode()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"from connected  user: "</span> + str(data))</span><br><span class="line">             </span><br><span class="line">            data = str(data).upper()</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"sending: "</span> + str(data))</span><br><span class="line">            conn.send(data.encode())</span><br><span class="line">             </span><br><span class="line">    conn.close()</span><br><span class="line">     </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    Main()</span><br></pre></td></tr></table></figure><p>下面我们来看看上面的服务端代码做了什么</p><ol><li>首先我们导入了Python的Socket库</li><li>接着我们定义了 <code>main</code> 函数</li><li>我们定义了两个变量 <code>host</code> 以及 <code>port</code> 用于保存服务端接受数据的IP地址和端口，这里是本地网所以往往就是 <code>127.0.0.1</code>, <code>5000</code> 端口只是我随意选择的一个如果你自己也可以随意选择一个另外的，只是这里需要注意一下必须是超过1024的端口号，因为&lt;=1024是系统预留的，不然会引起不必要的麻烦比如23 24 53 80 8080这些等等.</li><li>之后我们定义了一个变量 <code>mySocket</code>, 这是Python socket的一个实例</li><li>在服务端我们必须要绑定IP地址和端口号，调用的方法是 <code>.bind()</code> . 这里需要注意的是 <code>.bind()</code> 接受的是一个Tuple. 因此我用了<code>双括号</code>. 其实你也可以写成 <code>address = (&quot;127.0.0.1&quot;, 5000)</code> 然后直接传入 <code>.bind</code> 也可以。上面的写法更便于理解而已.</li><li>接下来我们调用了 <code>.listen()</code> 并且给了个<code>1</code>给她，意思就是开始持续地监听上面我们绑定的IP地址下面的<code>5000</code>端口直到我们关闭连接.</li><li>一切都设置好了，那么我们怎么知道 <code>Who</code> 发送过来的 <code>What</code> 呢，我们就定义了两个变量 <code>conn连接</code> 和 <code>addr地址</code> 用来保存这两个东西.</li><li>While 循环中就是server代码的核心了. 我们知道连接已经建立起来的那么久设置了一个<code>while True</code>的循环用于等待接收接下来 <code>client.py</code>发送过来的信息，但这个过程当中连接状态是没有关闭的. 我们申明了一个变量 <code>data</code> 用于接收客户端发送过来的数据并且解码了它, 这里非常注意在Python3中使用的是<code>decode</code>而不是<code>str()</code>来转换buffer的数据了. <code>.rect(1024)</code>中的1024是缓存接受到数据的一个大小.</li><li>接下来把接收到的data进行处理, 判断是否为空 转换大小写 打印接收到的数据等等 内部的一些操作. 之后把加工完的数据在<code>.encode()</code>之后通过<code>.send()</code>返回给客户端.</li><li>直到我们的客户端不再发送信息过来的时候我们就调用 <code>.close()</code>来关闭这个连接了。或者自己关闭服务端的运行.</li></ol><h3 id="client-py"><a href="#client-py" class="headerlink" title="client.py"></a>client.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Main</span><span class="params">()</span>:</span></span><br><span class="line">        host = <span class="string">'127.0.0.1'</span></span><br><span class="line">        port = <span class="number">5000</span></span><br><span class="line">         </span><br><span class="line">        mySocket = socket.socket()</span><br><span class="line">        mySocket.connect((host,port))</span><br><span class="line">         </span><br><span class="line">        message = input(<span class="string">" -&gt; "</span>)</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">while</span> message != <span class="string">'q'</span>:</span><br><span class="line">                mySocket.send(message.encode())</span><br><span class="line">                data = mySocket.recv(<span class="number">1024</span>).decode()</span><br><span class="line">                 </span><br><span class="line">                <span class="keyword">print</span> (<span class="string">'Received from server: '</span> + data)</span><br><span class="line">                 </span><br><span class="line">                message = input(<span class="string">" -&gt; "</span>)</span><br><span class="line">                 </span><br><span class="line">        mySocket.close()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    Main()</span><br></pre></td></tr></table></figure><p>我们来看看客户端做了些什么, 和服务端很差不多其相似的地方就简单带过。</p><ol><li>导入socket库，申明变量用于存放IP地址、端口、Socket实例等</li><li>不同于server端需要的是 <code>.bind()</code> 绑定，客户端需要的是 <code>.connect()</code> 连接, 这里注意地址和端口都是服务端的。很容易理解，你要写信给别人就需要填写对方的收信地址和收件人。</li><li>接下来就是等待我们出入需要发送的信息，直到输入的内容是<code>q</code>就关闭这个连接， 同时由于服务端收到了关闭连接的状态，也会关闭这个connection</li></ol><h1 id="Let’s-runing-it"><a href="#Let’s-runing-it" class="headerlink" title="Let’s runing it"></a>Let’s runing it</h1><h2 id="Server-1"><a href="#Server-1" class="headerlink" title="Server"></a>Server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; python3 server.py</span><br><span class="line">Connection from: (<span class="string">'127.0.0.1'</span>, 53703)</span><br><span class="line">from connected  user: I am Simon</span><br><span class="line">sending: I AM SIMON</span><br><span class="line">from connected  user: This is a <span class="built_in">test</span></span><br><span class="line">sending: THIS IS A TEST</span><br></pre></td></tr></table></figure><h2 id="Client-1"><a href="#Client-1" class="headerlink" title="Client"></a>Client</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; python3 client.py</span><br><span class="line"> -&gt; I am Simon</span><br><span class="line">Received from server: I AM SIMON</span><br><span class="line"> -&gt; This is a <span class="built_in">test</span></span><br><span class="line">Received from server: THIS IS A TEST</span><br><span class="line"> -&gt; q</span><br></pre></td></tr></table></figure><p> EOF.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;昨天的&lt;a href=&quot;/2018/07/15/Why-there-are-only-request-response-mo
      
    
    </summary>
    
    
      <category term="Python" scheme="https://blog.codewalker.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Why there are only request-response model but how to explain push</title>
    <link href="https://blog.codewalker.me/2018/07/15/Why-there-are-only-request-response-model-but-how-to-explain-push/"/>
    <id>https://blog.codewalker.me/2018/07/15/Why-there-are-only-request-response-model-but-how-to-explain-push/</id>
    <published>2018-07-14T17:47:59.000Z</published>
    <updated>2018-07-17T09:10:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why-there-are-only-request-response-model-but-how-to-explain-push"><a href="#Why-there-are-only-request-response-model-but-how-to-explain-push" class="headerlink" title="Why there are only request-response model but how to explain push"></a>Why there are only request-response model but how to explain push</h2><p>今天看帖子浏览到一篇文章讲<a href="http://cizixs.com/2015/09/21/what-is-a-web-framework" target="_blank" rel="noopener"><code>什么是 web 框架</code>what-is-a-web-framework</a>其中说到<code>HTTP 协议的基础是 请求-应答 (request-response) 模型</code>看到这里我突然就萌发了一个疑问。因为这里说到<code>request-response model</code>那么就是主动的一个请求 应答的过程，从<code>客户端请求-request</code>到<code>web server-response</code>的应答。那么这又怎么解释<code>push(推送)</code>呢？先把挖个坑在这.好吧其实这片文章真正的题目叫做</p><h3 id="Python-3-socket-programming-example"><a href="#Python-3-socket-programming-example" class="headerlink" title="Python 3 socket programming example"></a>Python 3 socket programming example</h3><h4 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h4><p>上面文章中给出了一个最基本的socket的例子但是是2.x版本的。这里提供一个3.x版本的<br>把下面的代码保存为<code>socket_base.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-07-15 00:56:20</span></span><br><span class="line"><span class="comment"># @Author  : Simon (simon.xie@codewalker.meg)</span></span><br><span class="line"><span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line"><span class="comment"># @Version : 1.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    host = <span class="string">"127.0.0.1"</span></span><br><span class="line">    port = <span class="number">5000</span></span><br><span class="line">     </span><br><span class="line">    mySocket = socket.socket()</span><br><span class="line">    mySocket.bind((host,port))</span><br><span class="line">     </span><br><span class="line">    mySocket.listen(<span class="number">1</span>)</span><br><span class="line">    conn, addr = mySocket.accept()</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Connection from: "</span> + str(addr))</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>).decode()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"from connected  user: "</span> + str(data))</span><br><span class="line">             </span><br><span class="line">            data = str(data).upper()</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"sending: "</span> + str(data))</span><br><span class="line">            conn.send(data.encode())</span><br><span class="line">             </span><br><span class="line">    conn.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>在终端A执行<code>python3 socket_base.py</code></p><h4 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h4><p>然后在开一个终端B执行<code>curl http://127.0.0.1:5000</code><br>在A中可以看到来自B的请求<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; python3 ./base_socket.py</span><br><span class="line">Connection from: (<span class="string">'127.0.0.1'</span>, 50285)</span><br><span class="line">from connected  user: GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:5000</span><br><span class="line">User-Agent: curl/7.54.0</span><br><span class="line">Accept: */*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sending: GET / HTTP/1.1</span><br><span class="line">HOST: 127.0.0.1:5000</span><br><span class="line">USER-AGENT: CURL/7.54.0</span><br><span class="line">ACCEPT: */*</span><br></pre></td></tr></table></figure></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>可以看出来B通过127.0.0.1的50285端口发送了get request到5000.<code>注: 本地请求所以都是127.0.0.1</code>得到下面的结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;HTTP Method&gt; &lt;URL&gt; &lt;HTTP version&gt;</span><br><span class="line">GET / HTTP/1.1</span><br></pre></td></tr></table></figure></p><p>在b中可以看到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl http://127.0.0.1:5000</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">HOST: 127.0.0.1:5000</span><br><span class="line">USER-AGENT: CURL/7.54.0</span><br><span class="line">ACCEPT: */*</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Why-there-are-only-request-response-model-but-how-to-explain-push&quot;&gt;&lt;a href=&quot;#Why-there-are-only-request-response-model-but-how-to-ex
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.codewalker.me/tags/python/"/>
    
      <category term="socket" scheme="https://blog.codewalker.me/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>whats wrong with npm</title>
    <link href="https://blog.codewalker.me/2018/07/14/whats-wrong-with-npm/"/>
    <id>https://blog.codewalker.me/2018/07/14/whats-wrong-with-npm/</id>
    <published>2018-07-14T10:42:25.000Z</published>
    <updated>2018-07-14T11:14:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WTF-不知道为啥升级Node导致了npm用不了了"><a href="#WTF-不知道为啥升级Node导致了npm用不了了" class="headerlink" title="WTF 不知道为啥升级Node导致了npm用不了了"></a>WTF 不知道为啥升级Node导致了npm用不了了</h2><h3 id="悲剧的起源还是来自于最近折腾的Hexo"><a href="#悲剧的起源还是来自于最近折腾的Hexo" class="headerlink" title="悲剧的起源还是来自于最近折腾的Hexo"></a>悲剧的起源还是来自于最近折腾的Hexo</h3><h4 id="hexo-wordcount"><a href="#hexo-wordcount" class="headerlink" title="hexo-wordcount"></a>hexo-wordcount</h4><p>悲剧的开始是之前在安装<code>hexo-wordcount</code>的时候一直给我说<code>Error: Unable to call &#39;wordcount&#39;, which is undefined or falsey</code>就以为是这个插件安装的时候的问题，在反复<code>安装 卸载 安装 卸载</code>*n</p><h4 id="难道是nunjucks转义出问题了"><a href="#难道是nunjucks转义出问题了" class="headerlink" title="难道是nunjucks转义出问题了?"></a>难道是nunjucks转义出问题了?</h4><p>非法字符又去修改<code>nunjucks</code>中的转义文件<code>src/lib.js</code>完全是在乱弄。</p><h4 id="难道是npm出问题了"><a href="#难道是npm出问题了" class="headerlink" title="难道是npm出问题了?"></a>难道是npm出问题了?</h4><p>结果还是不行索性重装了<code>npm</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -0 -L http://npmjs.org/install.sh | sudo sh</span><br></pre></td></tr></table></figure><p>欲哭无泪的感觉一样还是不行，现在到好了<code>npm -v</code>都不行了。可是尼玛明明node全家桶已经安装好了啊。<br>于是<code>which npm</code>查看尼玛 npm木有了。<br>现在才想起来Node全家桶是拿<code>Brew</code>装的哦<br>如果我再手动安装肯定会有冲突我这不是在脑残是什么.</p><h4 id="难道是Node版本不匹配"><a href="#难道是Node版本不匹配" class="headerlink" title="难道是Node版本不匹配?"></a>难道是Node版本不匹配?</h4><p>那么就<code>reinstall node 到最新版</code>吧很简单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; node -v</span><br><span class="line">v10.6.0</span><br><span class="line">brew reisntall node</span><br></pre></td></tr></table></figure><p>肯定没问题撒，老司机出马安个软件还会有问题吗?结果悲剧又发生了…<br>安装完之后告诉我说需要<code>brew postinstall node</code><br>WHT</p><blockquote><p>  Permission denied @ rb_sysopen - /usr/local/lib/node_modules/npm/.npmignore<br>    /usr/local/lib/node_modules<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x   9 codewalkertes  admin   288B Nov 23  2017 cnpm</span><br><span class="line">drwxr-xr-x   9 codewalkertes  admin   288B Nov 23  2017 express</span><br><span class="line">drwxr-xr-x   9 codewalkertes  admin   288B Nov 23  2017 grunt-cli</span><br><span class="line">drwxr-xr-x  16 codewalkertes  admin   512B Jul 13 17:58 hexo-cli</span><br><span class="line">drwxr-xr-x   7 codewalkertes  admin   224B Jul 14 15:59 n</span><br><span class="line">drwxr-xr-x  25 root           admin   800B Jul 14 16:07 npm</span><br></pre></td></tr></table></figure></p></blockquote><p>看吧自己种下的恶果还是要自己吃下去才行。都是因为之前sudo安装造成的。不怕生命还是在于折腾把虽然这都三十好几了.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R codewalkertes npm</span><br></pre></td></tr></table></figure></p><h2 id="Voila"><a href="#Voila" class="headerlink" title="Voilà"></a>Voilà</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm -v</span><br><span class="line">6.1.0</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>遇到问题了还是要想办法<code>debug</code>, 这次主要原因还是因为手动安装和Brew安装起了冲突所致。<br>总结嘛吃一堑长一智，不过有时候真是也因为记性的原因或者现代软件包管理的原因太过于复杂了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WTF-不知道为啥升级Node导致了npm用不了了&quot;&gt;&lt;a href=&quot;#WTF-不知道为啥升级Node导致了npm用不了了&quot; class=&quot;headerlink&quot; title=&quot;WTF 不知道为啥升级Node导致了npm用不了了&quot;&gt;&lt;/a&gt;WTF 不知道为啥升级
      
    
    </summary>
    
    
      <category term="MacOS" scheme="https://blog.codewalker.me/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>what plugs I installed</title>
    <link href="https://blog.codewalker.me/2018/07/14/what-plugs-I-installed/"/>
    <id>https://blog.codewalker.me/2018/07/14/what-plugs-I-installed/</id>
    <published>2018-07-14T07:00:06.000Z</published>
    <updated>2018-07-14T11:14:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>迁移到Hexo之后首要的是先学习MD语法其次再慢慢的安装一些适合的插件，这里就慢慢的列出来吧</p><h3 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h3><p>首先是订阅订阅插件, 虽然没什么人看为了方便还是提供一下这个功能吧 嘻嘻~</p><ol><li><p>在你的项目文件的根目录执行，先安装<code>hexo-generator-feed</code>插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure></li><li><p>编辑Hexo的配置文件<code>_config.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure><p>找到<code>#Extensions</code> 之后添加变成这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">plugins: hexo-generate-feed</span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line">feed:</span><br><span class="line">    <span class="built_in">type</span>: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    <span class="built_in">limit</span>: 20</span><br></pre></td></tr></table></figure></li><li><p>生成<code>rss文件</code>就可以看到效果了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>之后就可以看到<code>/public/atom.xml</code>已经按照上面配置的参数生成了</p></li></ol><h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><ol><li><p>安装<code>hexo-wordcount</code>字数统计</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure></li><li><p>随便在<code>footer</code>或者什么通用文件的最下面加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class=<span class="string">"post-count"</span>&gt;Words count: wordcount(site) 字&lt;/span&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li>notice *<br>这里可能会遇见<code>Error: Unable to call</code>wordcount<code>, which is undefined or falsey</code>的问题那是因为node版本太低所致<br>可以安装低版本的<code>words count</code>或者升级<code>node</code></li></ul><h4 id="查看升级Node"><a href="#查看升级Node" class="headerlink" title="查看升级Node"></a>查看升级Node</h4><p>然后嫩，悲剧的事情发生了导致npm直接<code>command not found: npm</code>这就是后话了可以<a href="#">查看杯具</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;迁移到Hexo之后首要的是先学习MD语法其次再慢慢的安装一些适合的插件，这里就慢慢的列出来吧&lt;/p&gt;
&lt;h3 id=&quot;订阅&quot;&gt;&lt;a href=&quot;#订阅&quot; class=&quot;headerlink&quot; title=&quot;订阅&quot;&gt;&lt;/a&gt;订阅&lt;/h3&gt;&lt;p&gt;首先是订阅订阅插件, 虽然没什么
      
    
    </summary>
    
    
      <category term="杂谈" scheme="https://blog.codewalker.me/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>hello hexo</title>
    <link href="https://blog.codewalker.me/2018/07/14/hello-hexo/"/>
    <id>https://blog.codewalker.me/2018/07/14/hello-hexo/</id>
    <published>2018-07-13T16:08:51.000Z</published>
    <updated>2018-07-17T09:09:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天终于把github+hexo搭建好了中间也踩了不少的坑也要感谢前辈们在网上分享的经验,感谢在最后.</p><ol><li><p>首先是发布不了<br> Google了之后才发现是没有安装发布插件，很简单装好就ok了</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>然后是</p><blockquote><p>Deployer not found: git</p></blockquote><p> Google了两分钟，都说的是1的问题。想应该是repo地址的问题，不应该是http的地址，应为按照教程来说之前配置过ssh那么就应该是ssh的方式commit，那么立即改成ssh git地址， it’s works。</p><p> 修改_config.yml中找到repo</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    git@github.com:codewalkertse/codewalkertse.github.io.git</span><br><span class="line">    ``` </span><br><span class="line"></span><br><span class="line">3. 这个问题更无厘头了。已经commit了为啥给我显示 ` There isn<span class="string">'t a GitHub Pages site here. ` 喃？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    还是来修改_config.yml找到 &gt; url: 修改成</span></span><br><span class="line"><span class="string">    ``` bash</span></span><br><span class="line"><span class="string">    url: https://codewalkertse.github.io</span></span><br></pre></td></tr></table></figure><p> ok 这样就可以直接访问<a href="https://codewalkertse.github.io" target="_blank" rel="noopener">我的hexo]</a>搭建的最初版本了</p><ul><li>之后绑定了自己域名方法可以看<a href="/2018/07/15/hexo-bind-your-onw-domain/">这里</a></li></ul></li><li><p>接下来Gitment的问题需要详细阅读<a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">这里</a></p></li></ol><p>感谢</p><pre><code>- [baixin.io](http://baixin.io) - [jsyzchen](https://segmentfault.com/a/1190000005624504) - [formulahendry](https://formulahendry.github.io/2016/12/04/hexo-ci/)</code></pre><p>Markdown语法还不是很熟悉排版简直惨不忍睹见谅</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天终于把github+hexo搭建好了中间也踩了不少的坑也要感谢前辈们在网上分享的经验,感谢在最后.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先是发布不了&lt;br&gt; Google了之后才发现是没有安装发布插件，很简单装好就ok了&lt;/p&gt;
 &lt;figure class=&quot;highl
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://blog.codewalker.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>python reverse iterator and generator ways</title>
    <link href="https://blog.codewalker.me/2018/07/12/python-reverse-iterator-way/"/>
    <id>https://blog.codewalker.me/2018/07/12/python-reverse-iterator-way/</id>
    <published>2018-07-12T15:30:50.000Z</published>
    <updated>2018-07-14T03:22:22.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line">\<span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">\<span class="comment"># @Date    : 2018-07-12 23:20:45</span></span><br><span class="line">\<span class="comment"># @Author  : Simon (simon.xie@codewalker.meg)</span></span><br><span class="line">\<span class="comment"># @Link    : http://www.codewalker.me</span></span><br><span class="line">\<span class="comment"># @Version : 1.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReverseIterator</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> \<span class="title">_</span>\<span class="title">_init</span>\<span class="title">_</span>\<span class="title">_</span><span class="params">(self, str_data)</span>:</span></span><br><span class="line">        self.str\_data = str\_data</span><br><span class="line">        self.index = len(str_data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> \<span class="title">_</span>\<span class="title">_iter</span>\<span class="title">_</span>\<span class="title">_</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> \<span class="title">_</span>\<span class="title">_next</span>\<span class="title">_</span>\<span class="title">_</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.index == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.index = self.index - <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> self.str_data\[self.index\]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reservse_genertor</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(len(data)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">yield</span> data\[index\]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    example_string = <span class="string">'simon.xie'</span> </span><br><span class="line">    ri = ReverseIterator(example_string)</span><br><span class="line">    new\_str\_list = \[\]</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> ri:</span><br><span class="line">        new\_str\_list.append(char)</span><br><span class="line">    print(<span class="string">''</span>.join(new\_str\_list))</span><br><span class="line"></span><br><span class="line">    other\_str\_list = \[\]</span><br><span class="line">    rg = reservse\_genertor(example\_string)</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> rg:</span><br><span class="line">        other\_str\_list.append(char)</span><br><span class="line">    print(<span class="string">''</span>.join(other\_str\_list))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> \_\_name\_\_ == <span class="string">"\_\_main\_\_"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="python" scheme="https://blog.codewalker.me/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python fib nums using iterator</title>
    <link href="https://blog.codewalker.me/2018/07/12/python-fib-nums-using-iterator/"/>
    <id>https://blog.codewalker.me/2018/07/12/python-fib-nums-using-iterator/</id>
    <published>2018-07-12T15:11:14.000Z</published>
    <updated>2018-07-13T12:49:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>#!/usr/bin/env python3<br># -<em>- coding: utf-8 -</em>-<br># @Date    : 2018-07-12 22:59:07<br># @Author  : Simon (<a href="mailto:simon.xie@codewalker.meg" target="_blank" rel="noopener">simon.xie@codewalker.meg</a>)<br># @Link    : <a href="http://www.codewalker.me" target="_blank" rel="noopener">http://www.codewalker.me</a><br># @Version : 1.0.0</p><p>class Fib:<br>    def __init__(self):<br>        self.prev = 0<br>        self.curr = 1<br>    def __iter__(self):<br>        return self<br>    def __next__(self):<br>        self.curr, self.prev = self.prev + self.curr, self.curr<br>        return self.curr</p><p>def main():<br>    fib = Fib()<br>    fib_list = []<br>    for _ in range(10):<br>        fib_list.append(next(fib))<br>    print(fib_list)<br>if __name__ == “__main__“:<br>    main()</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#!/usr/bin/env python3&lt;br&gt;# -&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;br&gt;# @Date    : 2018-07-12 22:59:07&lt;br&gt;# @Author  : Simon (&lt;a href=&quot;mailto:simon
      
    
    </summary>
    
      <category term="python" scheme="https://blog.codewalker.me/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python fib nums using generator</title>
    <link href="https://blog.codewalker.me/2018/07/12/python-fib-nums-using-generator/"/>
    <id>https://blog.codewalker.me/2018/07/12/python-fib-nums-using-generator/</id>
    <published>2018-07-12T14:57:50.000Z</published>
    <updated>2018-07-13T12:49:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>#!/usr/bin/env python3<br># -<em>- coding: utf-8 -</em>-<br># @Date    : 2018-07-12 22:48:30<br># @Author  : Simon (<a href="mailto:simon.xie@codewalker.meg" target="_blank" rel="noopener">simon.xie@codewalker.meg</a>)<br># @Link    : <a href="http://www.codewalker.me" target="_blank" rel="noopener">http://www.codewalker.me</a><br># @Version : 1.0.0</p><p>def fib_num_generator():<br>    a, b = 0, 1<br>    while True:<br>        a, b = b, a + b<br>        yield a</p><p>def main():<br>    f = fib_num_generator()<br>    fib_list = []<br>    for _ in range(10):<br>        fib_list.append(next(f))<br>    print(fib_list)<br>if __name__ == “__main__“:<br>    main()</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#!/usr/bin/env python3&lt;br&gt;# -&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;br&gt;# @Date    : 2018-07-12 22:48:30&lt;br&gt;# @Author  : Simon (&lt;a href=&quot;mailto:simon
      
    
    </summary>
    
      <category term="python" scheme="https://blog.codewalker.me/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python iterator generator yield first look</title>
    <link href="https://blog.codewalker.me/2018/07/12/python-iterator-generator-yield-first-look/"/>
    <id>https://blog.codewalker.me/2018/07/12/python-iterator-generator-yield-first-look/</id>
    <published>2018-07-12T14:29:14.000Z</published>
    <updated>2018-07-13T12:49:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>#!/usr/bin/env python3<br># -<em>- coding: utf-8 -</em>-<br># @Date    : 2018-07-12 16:14:53<br># @Author  : Simon (<a href="mailto:simon.xie@codewalker.meg" target="_blank" rel="noopener">simon.xie@codewalker.meg</a>)<br># @Link    : <a href="http://www.codewalker.me" target="_blank" rel="noopener">http://www.codewalker.me</a><br># @Version : 1.0.0<br>a_list = [ x  for x in range(5)]<br>print(‘we have a list: {}’.format(a_list))<br>pick_one_item = iter(a_list)<br>print(next(pick_one_item))<br>print(next(pick_one_item))<br>print(next(pick_one_item))<br>print(next(pick_one_item))<br>print(next(pick_one_item))<br># print(next(pick_one_item))<br># Traceback (most recent call last):<br>#   File “/Users/codewalkertes/Documents/script/python/yield_produce_consume.py”, line 15, in #     print(next(pick_one_item))<br># StopIteration<br>print(‘now we can see each of them we call next(), it will pick one item of list’)<br>print(‘But notic that it will throght out a stopIteration exception when cross the bounds’)<br>print(‘-‘*20)</p><p>def native_way(n):<br>    num, nums = 0, []<br>    while num &lt; n:<br>        nums.append(num)<br>        num += 1<br>    return nums</p><p>def genrator_way(n):<br>    num = 0<br>    while num &lt; n:<br>        yield num<br>        num += 1<br>print(sum(native_way(100)))<br>print(sum(genrator_way(100)))<br>print(‘-‘*20)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#!/usr/bin/env python3&lt;br&gt;# -&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;br&gt;# @Date    : 2018-07-12 16:14:53&lt;br&gt;# @Author  : Simon (&lt;a href=&quot;mailto:simon
      
    
    </summary>
    
      <category term="python" scheme="https://blog.codewalker.me/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>tax calculator</title>
    <link href="https://blog.codewalker.me/2018/07/12/tax-calculator/"/>
    <id>https://blog.codewalker.me/2018/07/12/tax-calculator/</id>
    <published>2018-07-12T09:24:58.000Z</published>
    <updated>2018-07-13T12:49:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>#!/usr/bin/env python3<br># -<em>- coding: utf-8 -</em>-<br># @Date    : 2018-07-12 16:14:53<br># @Author  : Simon (<a href="mailto:simon.xie@codewalker.meg" target="_blank" rel="noopener">simon.xie@codewalker.meg</a>)<br># @Link    : <a href="http://www.codewalker.me" target="_blank" rel="noopener">http://www.codewalker.me</a><br># @Version : 1.0.0</p><p>import sys, bisect</p><p>def tax_calculator(income):<br>    if income &lt; 5000:<br>        return 0.0<br>    above = income - 5000<br>    ranges = [ 0, 1500, 4500, 9000, 35000, 55000, 80000 ]<br>    rate = [ .03, .1, .2, .25, .30, .35, .45 ]<br>    i =  bisect.bisect_left(ranges, above)<br>    j = 0<br>    tax = 0.0<br>    while j &lt; i:<br>        if j + 1 &lt; i:<br>            tax += (ranges[j+1]-ranges[j])<em>rate[j]<br>        else:<br>            tax += (above-ranges[j]) </em> rate[j]<br>        j += 1<br>    return tax<br>def main(income):<br>    tax = tax_calculator(income)<br>    print(‘Tax is {}’.format(tax))</p><p>if __name__ == “__main__“:<br>    if len(sys.argv) &lt; 2:<br>        print(‘Usage: {} ‘.format(sys.argv[0]))<br>        sys.exit(1)<br>    main(float(sys.argv[1]))</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#!/usr/bin/env python3&lt;br&gt;# -&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;br&gt;# @Date    : 2018-07-12 16:14:53&lt;br&gt;# @Author  : Simon (&lt;a href=&quot;mailto:simon
      
    
    </summary>
    
      <category term="python" scheme="https://blog.codewalker.me/categories/python/"/>
    
    
  </entry>
  
</feed>
